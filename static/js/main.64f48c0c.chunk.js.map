{"version":3,"sources":["components/Sqaure.js","components/Board.js","components/Promotion.js","components/MoveHistory.js","components/Material.js","App.js","reportWebVitals.js","index.js"],"names":["Square","props","className","squareTypes","squareLoc","backgroundImage","onClick","onClickFunction","onClickParameters","pieceSelected","selectedPieceLoc","isCapture","targetLoc","targetPiece","whiteCastlingRights","blackCastlingRights","nextChar","c","String","fromCharCode","charCodeAt","prevChar","whitePieces","pawns","knights","bishops","rooks","queens","king","blackPieces","getPieceTypeByLetter","letter","pieceType","console","log","getLetterByPieceType","capturePiece","theirPieces","capturedPieceLoc","theirNewPieceType","piece","theirNewPieces","myKingInCheck","myPieces","myKingLoc","Object","keys","includes","iAmCheckmated","length","calculateLegalMoves","myColour","data","moveHistory","theirColour","checkForCheck","result","JSON","parse","stringify","legalMoves","inCheckAfterMove","currLoc","proposedLoc","theirProposedPieces","myNewPieces","newLocs","loc","proposedData","charAt","pawn","push","parseInt","squareUpAndLeft","squareUpAndRight","lastMove","initialPos","destination","squareDownAndLeft","squareDownAndRight","rook","obstructions","x","squareUpXsteps","squareDownXsteps","leftChar","square","rightChar","bishop","knight","queen","updateLegalMoves","getNewMoveHistory","player","move","newMoveHistory","moveName","generateMoveName","name","getMoveSuffix","promotionPiece","suffix","toUpperCase","updateMoveHistory","setMoveHistory","setPlayer","pieceLoc","currentSquareTypes","setSquareTypes","setData","promotion","setPromotion","setPromotionColour","material","setMaterial","nextPlayer","updatePieces","newSquareTypes","deselectSelectedPiece","substring","indexOf","selectNewPiece","checkForPromotion","kingLoc","newData","squaresUp","theirPawnLoc","newMaterial","white","black","Board","row","squareType","pieceName","board","useState","firstSquareLight","i","lightSquare","j","a1","b1","c1","d1","e1","f1","g1","h1","a2","b2","c2","d2","e2","f2","g2","h2","a3","b3","c3","d3","e3","f3","g3","h3","a4","b4","c4","d4","e4","f4","g4","h4","a5","b5","c5","d5","e5","f5","g5","h5","a6","b6","c6","d6","e6","f6","g6","h6","a7","b7","c7","d7","e7","f7","g7","h7","a8","b8","c8","d8","e8","f8","g8","h8","useEffect","newPiece","setPromotionPiece","Promotion","promotionColour","MoveHistory","newStr","document","getElementById","innerHTML","scrollTop","scrollHeight","id","Material","netMaterial","setNetMaterial","icons","setIcons","whiteTotalMaterial","blackTotalMaterial","newIcons","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.64f48c0c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Square = (props) => {\r\n    return (\r\n        <button className={\"square \" + props.squareTypes[props.squareLoc] + \" \" + props.backgroundImage} onClick={() => {props.onClickFunction(props.onClickParameters)}}></button>\r\n    );\r\n};\r\n\r\nexport default Square;","import React, {useState, useEffect} from 'react';\r\nimport Square from './Sqaure';\r\n\r\nlet pieceSelected = \"\";\r\nlet selectedPieceLoc = \"\";\r\nlet isCapture = false;\r\nlet targetLoc = \"\";\r\nlet targetPiece = \"\";\r\n// short, long castling rights\r\nlet whiteCastlingRights = [true, true];\r\nlet blackCastlingRights = [true, true];\r\n\r\nfunction nextChar(c) {\r\n    return String.fromCharCode(c.charCodeAt(0) + 1);\r\n}\r\n\r\nfunction prevChar(c) {\r\n    return String.fromCharCode(c.charCodeAt(0) - 1);\r\n}\r\n\r\n// structure of pieces objects\r\n    // {piece: {\"location\": [legal moves], ...}}\r\nlet whitePieces = {\r\n    pawns: {\"a2\":[], \"b2\":[], \"c2\":[], \"d2\":[], \"e2\":[], \"f2\":[], \"g2\":[], \"h2\":[]},\r\n    knights: {\"b1\":[], \"g1\":[]},\r\n    bishops: {\"c1\":[], \"f1\":[]},\r\n    rooks: {\"a1\":[], \"h1\":[]},\r\n    queens: {\"d1\":[]},\r\n    king: {\"e1\":[]}\r\n};\r\n\r\nlet blackPieces = {\r\n    pawns: {\"a7\":[], \"b7\":[], \"c7\":[], \"d7\":[], \"e7\":[], \"f7\":[], \"g7\":[], \"h7\":[]},\r\n    knights: {\"b8\":[], \"g8\":[]},\r\n    bishops: {\"c8\":[], \"f8\":[]},\r\n    rooks: {\"a8\":[], \"h8\":[]},\r\n    queens: {\"d8\":[]},\r\n    king: {\"e8\":[]}\r\n};\r\n\r\nconst getPieceTypeByLetter = (letter) => {\r\n    let pieceType;\r\n    switch(letter){\r\n        case \"p\": \r\n            pieceType = \"pawns\";\r\n            break;\r\n        case \"n\":\r\n            pieceType = \"knights\";\r\n            break;\r\n        case \"b\":\r\n            pieceType = \"bishops\";\r\n            break;\r\n        case \"r\":\r\n            pieceType = \"rooks\";\r\n            break;\r\n        case \"q\":\r\n            pieceType = \"queens\";\r\n            break;\r\n        case \"k\":\r\n            pieceType = \"king\";\r\n            break;\r\n        default:\r\n            console.log(\"error: invalid letter\");\r\n            break;\r\n    }\r\n    return pieceType;\r\n}\r\n\r\nconst getLetterByPieceType = (pieceType) => {\r\n    let letter;\r\n    switch(pieceType){\r\n        case \"pawns\": \r\n        letter = \"p\";\r\n            break;\r\n        case \"knights\":\r\n            letter = \"n\";\r\n            break;\r\n        case \"bishops\":\r\n            letter = \"b\";\r\n            break;\r\n        case \"rooks\":\r\n            letter = \"r\";\r\n            break;\r\n        case \"queens\":\r\n            letter = \"q\";\r\n            break;\r\n        case \"king\":\r\n            letter = \"k\";\r\n            break;\r\n        default:\r\n            console.log(\"error: invalid piece type\");\r\n            break;\r\n    }\r\n    return letter;\r\n}\r\n\r\nconst capturePiece = (theirPieces, pieceType, capturedPieceLoc) => {\r\n    let theirNewPieceType = {};\r\n    for(let piece in theirPieces[pieceType]){\r\n        if(piece != capturedPieceLoc){\r\n            theirNewPieceType[piece] = theirPieces[pieceType].piece;\r\n        }\r\n    }\r\n    let theirNewPieces = {... theirPieces};\r\n    theirNewPieces[pieceType] = theirNewPieceType;\r\n    return theirNewPieces;\r\n}\r\n\r\nconst myKingInCheck = (myPieces, theirPieces) => {\r\n    let myKingLoc = Object.keys(myPieces.king)[0];\r\n\r\n        for(let pieceType in theirPieces){\r\n            for(let piece in theirPieces[pieceType]){\r\n                if(theirPieces[pieceType][piece].includes(myKingLoc)){\r\n\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n}\r\n\r\nconst iAmCheckmated = (myPieces, theirPieces) => {\r\n    if(myKingInCheck(myPieces, theirPieces)){\r\n        for(let pieceType in myPieces){\r\n            for(let piece in myPieces[pieceType]){\r\n                if(myPieces[pieceType][piece].length > 0){\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\nconst calculateLegalMoves = (myPieces, theirPieces, myColour, data, moveHistory, checkForCheck = true) => {\r\n    \r\n    let result = JSON.parse(JSON.stringify(myPieces));\r\n\r\n    let theirColour;\r\n\r\n    if(myColour == \"white\"){\r\n        theirColour = \"black\";\r\n    }\r\n    else{\r\n        theirColour = \"white\";\r\n    }\r\n\r\n    /* the below function takes in a piece you want to move and it's proposed destination, and checks if the move results in the\r\n       player's king being in check */\r\n\r\n    const inCheckAfterMove = (pieceType, currLoc, proposedLoc, theirProposedPieces) => {\r\n        if(!checkForCheck) return false;\r\n\r\n        let myNewPieces = {...myPieces};\r\n        let newLocs = {};\r\n        for(let loc in myPieces[pieceType]){\r\n            if(loc != currLoc){\r\n                newLocs[loc] = myPieces[pieceType][loc]; \r\n            }\r\n            else {\r\n                newLocs[proposedLoc] = [];\r\n            }\r\n        }\r\n\r\n        myNewPieces[pieceType] = newLocs;\r\n        let proposedData = {...data};\r\n        proposedData[currLoc] = \"\";\r\n        proposedData[proposedLoc] = myColour.charAt(0) + getLetterByPieceType(pieceType);\r\n        let theirNewPieces = calculateLegalMoves(theirProposedPieces, myNewPieces, theirColour, proposedData, moveHistory, false);\r\n        return myKingInCheck(myNewPieces, theirNewPieces);\r\n\r\n    }    \r\n\r\n    // clean result\r\n\r\n    // for(let pawn in result.pawns){\r\n    //     result.pawns[pawn] = [];\r\n    // }\r\n\r\n    // for(let knight in result.knights){\r\n    //     result.knights[knight] = [];\r\n    // }\r\n\r\n    // for(let bishop in result.bishops){\r\n    //     result.bishops[bishop] = [];\r\n    // }\r\n\r\n    // for(let rook in result.rooks){\r\n    //     result.rooks[rook] = [];\r\n    // }\r\n    // for(let queen in result.queens){\r\n    //     result.queens[queen] = [];\r\n    // }\r\n    // for(let myKing in result.king){\r\n    //     result.king[myKing] = [];\r\n    // }\r\n\r\n\r\n    let legalMoves;\r\n\r\n    /*############################################  PAWNS  ##########################################################*/ \r\n\r\n\r\n    for(let pawn in myPieces.pawns){\r\n        legalMoves = [];\r\n        if(myColour == \"white\"){\r\n\r\n            // Pawn at starting position (can move 2 squares fwd)\r\n            if(pawn.charAt(1) == \"2\" && data[pawn.charAt(0) + \"3\" ] == \"\" && data[pawn.charAt(0) + \"4\" ] == \"\" && !inCheckAfterMove(\"pawns\", pawn, pawn.charAt(0) + \"4\", theirPieces)){\r\n                legalMoves.push(pawn.charAt(0)+ \"4\");\r\n            }\r\n\r\n            // Fwd one move\r\n            if(data[pawn.charAt(0) + (parseInt(pawn.charAt(1)) + 1) ] == \"\" && !inCheckAfterMove(\"pawns\", pawn, pawn.charAt(0)+ (parseInt(pawn.charAt(1)) + 1), theirPieces)){\r\n                legalMoves.push(pawn.charAt(0)+ (parseInt(pawn.charAt(1)) + 1));\r\n            }\r\n            \r\n            // Capture to the left\r\n            let squareUpAndLeft = prevChar(pawn.charAt(0)) + (parseInt(pawn.charAt(1)) + 1);\r\n            if(pawn.charAt(0) != \"a\" && data[squareUpAndLeft].charAt(0) == \"b\") {\r\n\r\n                let theirNewPieces = capturePiece(theirPieces, getPieceTypeByLetter(data[squareUpAndLeft].charAt(1)), squareUpAndLeft);\r\n\r\n                if(!inCheckAfterMove(\"pawns\", pawn, squareUpAndLeft, theirNewPieces)){\r\n                    legalMoves.push(squareUpAndLeft);\r\n                }\r\n            }\r\n\r\n            // Capture to the right\r\n            let squareUpAndRight = nextChar(pawn.charAt(0)) + (parseInt(pawn.charAt(1)) + 1);\r\n            if(pawn.charAt(0) != \"h\" && data[squareUpAndRight].charAt(0) == \"b\") {\r\n\r\n                let theirNewPieces = capturePiece(theirPieces, getPieceTypeByLetter(data[squareUpAndRight].charAt(1)), squareUpAndRight);\r\n\r\n                if(!inCheckAfterMove(\"pawns\", pawn, squareUpAndRight, theirNewPieces)){\r\n                    legalMoves.push(squareUpAndRight);\r\n                }\r\n            }\r\n\r\n            // En Passant\r\n            if(pawn.charAt(1) == \"5\" && moveHistory.length > 0){\r\n                let lastMove = moveHistory[moveHistory.length-1];\r\n                if(lastMove.piece == \"bp\" && lastMove.initialPos.charAt(1) == \"7\" && lastMove.destination.charAt(1) == \"5\"){\r\n                        if(prevChar(pawn.charAt(0)) == lastMove.destination.charAt(0)){\r\n                            legalMoves.push(\"<-x\");\r\n                        }\r\n                        else if(nextChar(pawn.charAt(0)) == lastMove.destination.charAt(0)){\r\n                            legalMoves.push(\"x->\");\r\n                        }\r\n                    }  \r\n            } \r\n        }\r\n        else{\r\n            // Pawn at starting position (can move 2 squares fwd)\r\n            if(pawn.charAt(1) == \"7\" && data[pawn.charAt(0) + \"6\" ] == \"\" && data[pawn.charAt(0) + \"5\" ] == \"\" && !inCheckAfterMove(\"pawns\", pawn, pawn.charAt(0) + \"5\", theirPieces)){\r\n                legalMoves.push(pawn.charAt(0) + \"5\");\r\n            }\r\n\r\n            // Fwd one move\r\n            if(data[pawn.charAt(0) + (parseInt(pawn.charAt(1)) - 1) ] == \"\" && !inCheckAfterMove(\"pawns\", pawn, pawn.charAt(0)+ (parseInt(pawn.charAt(1)) - 1), theirPieces)){\r\n                legalMoves.push(pawn.charAt(0)+ (parseInt(pawn.charAt(1)) - 1));\r\n            }\r\n\r\n            // Capture to the left\r\n            let squareDownAndLeft = prevChar(pawn.charAt(0)) + (parseInt(pawn.charAt(1)) - 1);\r\n            if(pawn.charAt(0) != \"a\" && data[squareDownAndLeft].charAt(0) == \"w\") {\r\n\r\n                let theirNewPieces = capturePiece(theirPieces, getPieceTypeByLetter(data[squareDownAndLeft].charAt(1)), squareDownAndLeft);\r\n\r\n                if(!inCheckAfterMove(\"pawns\", pawn, squareDownAndLeft, theirNewPieces)){\r\n                    legalMoves.push(squareDownAndLeft);\r\n                }\r\n            }\r\n\r\n            // Capture to the right\r\n            let squareDownAndRight = nextChar(pawn.charAt(0)) + (parseInt(pawn.charAt(1)) - 1);\r\n            if(pawn.charAt(0) != \"h\" && data[squareDownAndRight].charAt(0) == \"w\") {\r\n\r\n                let theirNewPieces = capturePiece(theirPieces, getPieceTypeByLetter(data[squareDownAndRight].charAt(1)), squareDownAndRight);\r\n\r\n                if(!inCheckAfterMove(\"pawns\", pawn, squareDownAndRight, theirNewPieces)){\r\n                    legalMoves.push(squareDownAndRight);\r\n                }\r\n            }\r\n\r\n            // En Passant\r\n            if(pawn.charAt(1) == \"4\" && moveHistory.length > 0){\r\n                let lastMove = moveHistory[moveHistory.length-1];\r\n                if(lastMove.piece == \"wp\" && lastMove.initialPos.charAt(1) == \"2\" && lastMove.destination.charAt(1) == \"4\"){\r\n                        if(prevChar(pawn.charAt(0)) == lastMove.destination.charAt(0)){\r\n                            legalMoves.push(\"<-x\");\r\n                        }\r\n                        else if(nextChar(pawn.charAt(0)) == lastMove.destination.charAt(0)){\r\n                            legalMoves.push(\"x->\");\r\n                        }\r\n                    }  \r\n            } \r\n            \r\n        }\r\n        result.pawns[pawn] = [...legalMoves];\r\n    }\r\n\r\n    /* #############################################     ROOKS    ################################################################ */\r\n    for(let rook in myPieces.rooks){\r\n        legalMoves = [];\r\n\r\n        // Moves up\r\n        let obstructions = false;\r\n        let x = 1;\r\n        while(!obstructions && (parseInt(rook.charAt(1)) + x) <= 8){\r\n            let squareUpXsteps = rook.charAt(0) + (parseInt(rook.charAt(1)) + x);\r\n            \r\n\r\n            if(data[squareUpXsteps] == \"\" && !inCheckAfterMove(\"rooks\", rook, squareUpXsteps, theirPieces)){\r\n                legalMoves.push(squareUpXsteps);\r\n            }\r\n            else if(data[squareUpXsteps].charAt(0) == myColour.charAt(0)){\r\n                obstructions = true;\r\n            }\r\n            else if(data[squareUpXsteps] != \"\"){\r\n                let theirNewPieces = capturePiece(theirPieces, getPieceTypeByLetter(data[squareUpXsteps].charAt(1)), squareUpXsteps);\r\n                if(!inCheckAfterMove(\"rooks\", rook, squareUpXsteps, theirNewPieces)){\r\n                    legalMoves.push(squareUpXsteps);\r\n                }\r\n                obstructions = true;\r\n            }\r\n            x++;\r\n        }\r\n\r\n        // Moves down\r\n\r\n        obstructions = false;\r\n        x = -1;\r\n        while(!obstructions && (parseInt(rook.charAt(1)) + x) >= 1){\r\n            let squareDownXsteps = rook.charAt(0) + (parseInt(rook.charAt(1)) + x);\r\n\r\n            if(data[squareDownXsteps] == \"\" && !inCheckAfterMove(\"rooks\", rook, squareDownXsteps, theirPieces)){\r\n                legalMoves.push(squareDownXsteps);\r\n            }\r\n            else if(data[squareDownXsteps].charAt(0) == myColour.charAt(0)){\r\n                obstructions = true;\r\n            }\r\n            else if(data[squareDownXsteps] != \"\"){\r\n                let theirNewPieces = capturePiece(theirPieces, getPieceTypeByLetter(data[squareDownXsteps].charAt(1)), squareDownXsteps);\r\n                if(!inCheckAfterMove(\"rooks\", rook, squareDownXsteps, theirNewPieces)){\r\n                    legalMoves.push(squareDownXsteps);\r\n                }\r\n                obstructions = true;\r\n            }\r\n\r\n            x--;\r\n        }\r\n\r\n        // Moves Left\r\n        obstructions = false;\r\n        let leftChar = prevChar(rook.charAt(0));\r\n        while(!obstructions && rook.charAt(0) != \"a\"){\r\n            let square = leftChar + parseInt(rook.charAt(1));\r\n            if(data[square] == \"\" && !inCheckAfterMove(\"rooks\", rook, square, theirPieces)){\r\n                legalMoves.push(square);\r\n            }\r\n            else if(data[square].charAt(0) == myColour.charAt(0)){\r\n                obstructions = true;\r\n            }\r\n            else if(data[square] != \"\"){\r\n                let theirNewPieces = capturePiece(theirPieces, getPieceTypeByLetter(data[square].charAt(1)), square);\r\n                if(!inCheckAfterMove(\"rooks\", rook, square, theirNewPieces)){\r\n                    legalMoves.push(square);\r\n                }\r\n                obstructions = true;\r\n            }\r\n\r\n            if(leftChar == \"a\"){\r\n                obstructions = true;\r\n            }\r\n            else{\r\n                leftChar = prevChar(leftChar);\r\n            }\r\n        }\r\n\r\n        // Moves Right\r\n        obstructions = false;\r\n        let rightChar = nextChar(rook.charAt(0));\r\n        while(!obstructions && rook.charAt(0) != \"h\"){\r\n            let square = rightChar + parseInt(rook.charAt(1));\r\n            if(data[square] == \"\" && !inCheckAfterMove(\"rooks\", rook, square, theirPieces)){\r\n                legalMoves.push(square);\r\n            }\r\n            else if(data[square].charAt(0) == myColour.charAt(0)){\r\n                obstructions = true;\r\n            }\r\n            else if(data[square] != \"\"){\r\n                let theirNewPieces = capturePiece(theirPieces, getPieceTypeByLetter(data[square].charAt(1)), square);\r\n                if(!inCheckAfterMove(\"rooks\", rook, square, theirNewPieces)){\r\n                    legalMoves.push(square);\r\n                }\r\n                obstructions = true;\r\n            }\r\n\r\n            if(rightChar == \"h\"){\r\n                obstructions = true;\r\n            }\r\n            else{\r\n                rightChar = nextChar(rightChar);\r\n            }\r\n        }\r\n\r\n        result.rooks[rook] = [...legalMoves];\r\n    }\r\n\r\n    /* #############################################     BISHOPS    ################################################################ */\r\n\r\n    for(let bishop in myPieces.bishops){\r\n        legalMoves = [];\r\n\r\n        // Moves up and right\r\n        let obstructions = false;\r\n        let x = 1;\r\n        let rightChar = nextChar(bishop.charAt(0));\r\n\r\n        while(!obstructions && (parseInt(bishop.charAt(1)) + x) <= 8 && bishop.charAt(0) != \"h\"){\r\n            let square = rightChar + (parseInt(bishop.charAt(1)) + x);\r\n\r\n            if(data[square] == \"\" && !inCheckAfterMove(\"bishops\", bishop, square, theirPieces)){\r\n                legalMoves.push(square);\r\n            }\r\n            else if (data[square].charAt(0) == myColour.charAt(0)){\r\n                obstructions = true;\r\n            }\r\n            else if(data[square] != \"\"){\r\n                let theirNewPieces = capturePiece(theirPieces, getPieceTypeByLetter(data[square].charAt(1)), square);\r\n                if(!inCheckAfterMove(\"bishops\", bishop, square, theirNewPieces)){\r\n                    legalMoves.push(square);\r\n                }\r\n                obstructions = true;\r\n            }\r\n\r\n            if(rightChar == \"h\"){\r\n                obstructions = true;\r\n            }\r\n            else{\r\n                x++;\r\n                rightChar = nextChar(rightChar);\r\n            }\r\n        }\r\n\r\n        // Moves up and left\r\n\r\n        obstructions = false;\r\n        x = 1;\r\n        let leftChar = prevChar(bishop.charAt(0));\r\n\r\n        while(!obstructions && (parseInt(bishop.charAt(1)) + x) <= 8 && bishop.charAt(0) != \"a\"){\r\n            let square = leftChar + (parseInt(bishop.charAt(1)) + x);\r\n\r\n            if(data[square] == \"\" && !inCheckAfterMove(\"bishops\", bishop, square, theirPieces)){\r\n                legalMoves.push(square);\r\n            }\r\n            else if (data[square].charAt(0) == myColour.charAt(0)){\r\n                obstructions = true;\r\n            }\r\n            else if(data[square] != \"\"){\r\n                let theirNewPieces = capturePiece(theirPieces, getPieceTypeByLetter(data[square].charAt(1)), square);\r\n                if(!inCheckAfterMove(\"bishops\", bishop, square, theirNewPieces)){\r\n                    legalMoves.push(square);\r\n                }\r\n                obstructions = true;\r\n            }\r\n\r\n            if(leftChar == \"a\"){\r\n                obstructions = true;\r\n            }\r\n            else{\r\n                x++;\r\n                leftChar = prevChar(leftChar);\r\n            }\r\n        }\r\n\r\n        // Moves down and right\r\n        obstructions = false;\r\n        x = -1;\r\n        rightChar = nextChar(bishop.charAt(0));\r\n\r\n        while(!obstructions && (parseInt(bishop.charAt(1)) + x) >= 1 && bishop.charAt(0) != \"h\"){\r\n            let square = rightChar + (parseInt(bishop.charAt(1)) + x);\r\n\r\n            if(data[square] == \"\" && !inCheckAfterMove(\"bishops\", bishop, square, theirPieces)){\r\n                legalMoves.push(square);\r\n            }\r\n            else if (data[square].charAt(0) == myColour.charAt(0)){\r\n                obstructions = true;\r\n            }\r\n            else if(data[square] != \"\"){\r\n                let theirNewPieces = capturePiece(theirPieces, getPieceTypeByLetter(data[square].charAt(1)), square);\r\n                if(!inCheckAfterMove(\"bishops\", bishop, square, theirNewPieces)){\r\n                    legalMoves.push(square);\r\n                }\r\n                obstructions = true;\r\n            }\r\n\r\n            if(rightChar == \"h\"){\r\n                obstructions = true;\r\n            }\r\n            else{\r\n                x--;\r\n                rightChar = nextChar(rightChar);\r\n            }\r\n        }\r\n\r\n        // Moves down and left\r\n\r\n        obstructions = false;\r\n        x = -1;\r\n        leftChar = prevChar(bishop.charAt(0));\r\n\r\n        while(!obstructions && (parseInt(bishop.charAt(1)) + x) >= 1 && bishop.charAt(0) != \"a\"){\r\n            let square = leftChar + (parseInt(bishop.charAt(1)) + x);\r\n\r\n            if(data[square] == \"\" && !inCheckAfterMove(\"bishops\", bishop, square, theirPieces)){\r\n                legalMoves.push(square);\r\n            }\r\n            else if (data[square].charAt(0) == myColour.charAt(0)){\r\n                obstructions = true;\r\n            }\r\n            else if(data[square] != \"\"){\r\n                let theirNewPieces = capturePiece(theirPieces, getPieceTypeByLetter(data[square].charAt(1)), square);\r\n                if(!inCheckAfterMove(\"bishops\", bishop, square, theirNewPieces)){\r\n                    legalMoves.push(square);\r\n                }\r\n                obstructions = true;\r\n            }\r\n\r\n            if(leftChar == \"a\"){\r\n                obstructions = true;\r\n            }\r\n            else{\r\n                x--;\r\n                leftChar = prevChar(leftChar);\r\n            }\r\n        }\r\n        result.bishops[bishop] = [...legalMoves];\r\n    }\r\n\r\n    /* #############################################     KNIGHTS    ################################################################ */\r\n    for(let knight in myPieces.knights){\r\n        legalMoves = [];\r\n        let square;\r\n\r\n        /* \r\n            x x\r\n            x\r\n            N\r\n        */\r\n\r\n        if(parseInt(knight.charAt(1)) < 7 && knight.charAt(0) != \"h\"){\r\n            square = nextChar(knight.charAt(0)) + (parseInt(knight.charAt(1)) + 2);\r\n\r\n            if(data[square] == \"\" && !inCheckAfterMove(\"knights\", knight, square, theirPieces)){\r\n                legalMoves.push(square);\r\n            }\r\n            else if(data[square].charAt(0) != myColour.charAt(0) && data[square] != \"\"){\r\n                let theirNewPieces = capturePiece(theirPieces, getPieceTypeByLetter(data[square].charAt(1)), square);\r\n                if(!inCheckAfterMove(\"knights\", knight, square, theirNewPieces)){\r\n                    legalMoves.push(square);\r\n                }\r\n            }\r\n        }\r\n\r\n        /* \r\n            x x\r\n              x\r\n              N\r\n        */\r\n\r\n        if(parseInt(knight.charAt(1)) < 7 && knight.charAt(0) != \"a\"){\r\n            square = prevChar(knight.charAt(0)) + (parseInt(knight.charAt(1)) + 2);\r\n\r\n            if(data[square] == \"\" && !inCheckAfterMove(\"knights\", knight, square, theirPieces)){\r\n                legalMoves.push(square);\r\n            }\r\n            else if(data[square].charAt(0) != myColour.charAt(0) && data[square] != \"\"){\r\n                let theirNewPieces = capturePiece(theirPieces, getPieceTypeByLetter(data[square].charAt(1)), square);\r\n                if(!inCheckAfterMove(\"knights\", knight, square, theirNewPieces)){\r\n                    legalMoves.push(square);\r\n                }\r\n            }\r\n        }\r\n\r\n        /* \r\n            N\r\n            x\r\n            x x\r\n        */\r\n\r\n        if(parseInt(knight.charAt(1)) > 2 && knight.charAt(0) != \"h\"){\r\n            square = nextChar(knight.charAt(0)) + (parseInt(knight.charAt(1)) - 2);\r\n\r\n            if(data[square] == \"\" && !inCheckAfterMove(\"knights\", knight, square, theirPieces)){\r\n                legalMoves.push(square);\r\n            }\r\n            else if(data[square].charAt(0) != myColour.charAt(0) && data[square] != \"\"){\r\n                let theirNewPieces = capturePiece(theirPieces, getPieceTypeByLetter(data[square].charAt(1)), square);\r\n                if(!inCheckAfterMove(\"knights\", knight, square, theirNewPieces)){\r\n                    legalMoves.push(square);\r\n                }\r\n            }\r\n        }\r\n\r\n        /* \r\n              N\r\n              x\r\n            x x\r\n        */\r\n\r\n        if(parseInt(knight.charAt(1)) > 2 && knight.charAt(0) != \"a\"){\r\n            square = prevChar(knight.charAt(0)) + (parseInt(knight.charAt(1)) - 2);\r\n\r\n            if(data[square] == \"\" && !inCheckAfterMove(\"knights\", knight, square, theirPieces)){\r\n                legalMoves.push(square);\r\n            }\r\n            else if(data[square].charAt(0) != myColour.charAt(0) && data[square] != \"\"){\r\n                let theirNewPieces = capturePiece(theirPieces, getPieceTypeByLetter(data[square].charAt(1)), square);\r\n                if(!inCheckAfterMove(\"knights\", knight, square, theirNewPieces)){\r\n                    legalMoves.push(square);\r\n                }\r\n            }\r\n        }\r\n\r\n        /* \r\n            x x x\r\n            N\r\n        */\r\n\r\n        if(knight.charAt(1) != \"8\" && knight.charAt(0) != \"h\" && knight.charAt(0) != \"g\"){\r\n            square = nextChar(nextChar(knight.charAt(0))) + (parseInt(knight.charAt(1)) + 1);\r\n\r\n            if(data[square] == \"\" && !inCheckAfterMove(\"knights\", knight, square, theirPieces)){\r\n                legalMoves.push(square);\r\n            }\r\n            else if(data[square].charAt(0) != myColour.charAt(0) && data[square] != \"\"){\r\n                let theirNewPieces = capturePiece(theirPieces, getPieceTypeByLetter(data[square].charAt(1)), square);\r\n                if(!inCheckAfterMove(\"knights\", knight, square, theirNewPieces)){\r\n                    legalMoves.push(square);\r\n                }\r\n            }\r\n        }\r\n\r\n        /* \r\n            x x x\r\n                N\r\n        */\r\n\r\n        if(knight.charAt(1) != \"8\" && knight.charAt(0) != \"a\" && knight.charAt(0) != \"b\"){\r\n            square = prevChar(prevChar(knight.charAt(0))) + (parseInt(knight.charAt(1)) + 1);\r\n\r\n            if(data[square] == \"\" && !inCheckAfterMove(\"knights\", knight, square, theirPieces)){\r\n                legalMoves.push(square);\r\n            }\r\n            else if(data[square].charAt(0) != myColour.charAt(0) && data[square] != \"\"){\r\n                let theirNewPieces = capturePiece(theirPieces, getPieceTypeByLetter(data[square].charAt(1)), square);\r\n                if(!inCheckAfterMove(\"knights\", knight, square, theirNewPieces)){\r\n                    legalMoves.push(square);\r\n                }\r\n            }\r\n        }\r\n\r\n        /* \r\n            N\r\n            x x x\r\n        */\r\n\r\n        if(knight.charAt(1) != \"1\" && knight.charAt(0) != \"h\" && knight.charAt(0) != \"g\"){\r\n            square = nextChar(nextChar(knight.charAt(0))) + (parseInt(knight.charAt(1)) - 1);\r\n\r\n            if(data[square] == \"\" && !inCheckAfterMove(\"knights\", knight, square, theirPieces)){\r\n                legalMoves.push(square);\r\n            }\r\n            else if(data[square].charAt(0) != myColour.charAt(0) && data[square] != \"\"){\r\n                let theirNewPieces = capturePiece(theirPieces, getPieceTypeByLetter(data[square].charAt(1)), square);\r\n                if(!inCheckAfterMove(\"knights\", knight, square, theirNewPieces)){\r\n                    legalMoves.push(square);\r\n                }\r\n            }\r\n        }\r\n\r\n        /* \r\n                N\r\n            x x x\r\n        */\r\n\r\n        if(knight.charAt(1) != \"1\" && knight.charAt(0) != \"a\" && knight.charAt(0) != \"b\"){\r\n            square = prevChar(prevChar(knight.charAt(0))) + (parseInt(knight.charAt(1)) - 1);\r\n\r\n            if(data[square] == \"\" && !inCheckAfterMove(\"knights\", knight, square, theirPieces)){\r\n                legalMoves.push(square);\r\n            }\r\n            else if(data[square].charAt(0) != myColour.charAt(0) && data[square] != \"\"){\r\n                let theirNewPieces = capturePiece(theirPieces, getPieceTypeByLetter(data[square].charAt(1)), square);\r\n                if(!inCheckAfterMove(\"knights\", knight, square, theirNewPieces)){\r\n                    legalMoves.push(square);\r\n                }\r\n            }\r\n        }\r\n\r\n        result.knights[knight] = [...legalMoves];\r\n\r\n    }\r\n\r\n    /* #############################################     QUEENS    ################################################################ */\r\n    for(let queen in myPieces.queens){\r\n        legalMoves = [];\r\n\r\n        // Moves up\r\n        let obstructions = false;\r\n        let x = 1;\r\n        while(!obstructions && (parseInt(queen.charAt(1)) + x) <= 8){\r\n            let squareUpXsteps = queen.charAt(0) + (parseInt(queen.charAt(1)) + x);\r\n            \r\n\r\n            if(data[squareUpXsteps] == \"\" && !inCheckAfterMove(\"queens\", queen, squareUpXsteps, theirPieces)){\r\n                legalMoves.push(squareUpXsteps);\r\n            }\r\n            else if(data[squareUpXsteps].charAt(0) == myColour.charAt(0)){\r\n                obstructions = true;\r\n            }\r\n            else if(data[squareUpXsteps] != \"\"){\r\n                let theirNewPieces = capturePiece(theirPieces, getPieceTypeByLetter(data[squareUpXsteps].charAt(1)), squareUpXsteps);\r\n                if(!inCheckAfterMove(\"queens\", queen, squareUpXsteps, theirNewPieces)){\r\n                    legalMoves.push(squareUpXsteps);\r\n                }\r\n                obstructions = true;\r\n            }\r\n            x++;\r\n        }\r\n\r\n        // Moves down\r\n\r\n        obstructions = false;\r\n        x = -1;\r\n        while(!obstructions && (parseInt(queen.charAt(1)) + x) >= 1){\r\n            let squareDownXsteps = queen.charAt(0) + (parseInt(queen.charAt(1)) + x);\r\n\r\n            if(data[squareDownXsteps] == \"\" && !inCheckAfterMove(\"queens\", queen, squareDownXsteps, theirPieces)){\r\n                legalMoves.push(squareDownXsteps);\r\n            }\r\n            else if(data[squareDownXsteps].charAt(0) == myColour.charAt(0)){\r\n                obstructions = true;\r\n            }\r\n            else if(data[squareDownXsteps] != \"\"){\r\n                let theirNewPieces = capturePiece(theirPieces, getPieceTypeByLetter(data[squareDownXsteps].charAt(1)), squareDownXsteps);\r\n                if(!inCheckAfterMove(\"queens\", queen, squareDownXsteps, theirNewPieces)){\r\n                    legalMoves.push(squareDownXsteps);\r\n                }\r\n                obstructions = true;\r\n            }\r\n\r\n            x--;\r\n        }\r\n\r\n        // Moves Left\r\n        obstructions = false;\r\n        let leftChar = prevChar(queen.charAt(0));\r\n        while(!obstructions && queen.charAt(0) != \"a\"){\r\n            let square = leftChar + parseInt(queen.charAt(1));\r\n            if(data[square] == \"\" && !inCheckAfterMove(\"queens\", queen, square, theirPieces)){\r\n                legalMoves.push(square);\r\n            }\r\n            else if(data[square].charAt(0) == myColour.charAt(0)){\r\n                obstructions = true;\r\n            }\r\n            else if(data[square] != \"\"){\r\n                let theirNewPieces = capturePiece(theirPieces, getPieceTypeByLetter(data[square].charAt(1)), square);\r\n                if(!inCheckAfterMove(\"queens\", queen, square, theirNewPieces)){\r\n                    legalMoves.push(square);\r\n                }\r\n                obstructions = true;\r\n            }\r\n\r\n            if(leftChar == \"a\"){\r\n                obstructions = true;\r\n            }\r\n            else{\r\n                leftChar = prevChar(leftChar);\r\n            }\r\n        }\r\n\r\n        // Moves Right\r\n        obstructions = false;\r\n        let rightChar = nextChar(queen.charAt(0));\r\n        while(!obstructions && queen.charAt(0) != \"h\"){\r\n            let square = rightChar + parseInt(queen.charAt(1));\r\n            if(data[square] == \"\" && !inCheckAfterMove(\"queens\", queen, square, theirPieces)){\r\n                legalMoves.push(square);\r\n            }\r\n            else if(data[square].charAt(0) == myColour.charAt(0)){\r\n                obstructions = true;\r\n            }\r\n            else if(data[square] != \"\"){\r\n                let theirNewPieces = capturePiece(theirPieces, getPieceTypeByLetter(data[square].charAt(1)), square);\r\n                if(!inCheckAfterMove(\"queens\", queen, square, theirNewPieces)){\r\n                    legalMoves.push(square);\r\n                }\r\n                obstructions = true;\r\n            }\r\n\r\n            if(rightChar == \"h\"){\r\n                obstructions = true;\r\n            }\r\n            else{\r\n                rightChar = nextChar(rightChar);\r\n            }\r\n        }\r\n\r\n        // Moves up and right\r\n        obstructions = false;\r\n        x = 1;\r\n        rightChar = nextChar(queen.charAt(0));\r\n\r\n        while(!obstructions && (parseInt(queen.charAt(1)) + x) <= 8 && queen.charAt(0) != \"h\"){\r\n            let square = rightChar + (parseInt(queen.charAt(1)) + x);\r\n\r\n            if(data[square] == \"\" && !inCheckAfterMove(\"queens\", queen, square, theirPieces)){\r\n                legalMoves.push(square);\r\n            }\r\n            else if (data[square].charAt(0) == myColour.charAt(0)){\r\n                obstructions = true;\r\n            }\r\n            else if(data[square] != \"\"){\r\n                let theirNewPieces = capturePiece(theirPieces, getPieceTypeByLetter(data[square].charAt(1)), square);\r\n                if(!inCheckAfterMove(\"queens\", queen, square, theirNewPieces)){\r\n                    legalMoves.push(square);\r\n                }\r\n                obstructions = true;\r\n            }\r\n\r\n            if(rightChar == \"h\"){\r\n                obstructions = true;\r\n            }\r\n            else{\r\n                x++;\r\n                rightChar = nextChar(rightChar);\r\n            }\r\n        }\r\n\r\n        // Moves up and left\r\n\r\n        obstructions = false;\r\n        x = 1;\r\n        leftChar = prevChar(queen.charAt(0));\r\n\r\n        while(!obstructions && (parseInt(queen.charAt(1)) + x) <= 8 && queen.charAt(0) != \"a\"){\r\n            let square = leftChar + (parseInt(queen.charAt(1)) + x);\r\n\r\n            if(data[square] == \"\" && !inCheckAfterMove(\"queens\", queen, square, theirPieces)){\r\n                legalMoves.push(square);\r\n            }\r\n            else if (data[square].charAt(0) == myColour.charAt(0)){\r\n                obstructions = true;\r\n            }\r\n            else if(data[square] != \"\"){\r\n                let theirNewPieces = capturePiece(theirPieces, getPieceTypeByLetter(data[square].charAt(1)), square);\r\n                if(!inCheckAfterMove(\"queens\", queen, square, theirNewPieces)){\r\n                    legalMoves.push(square);\r\n                }\r\n                obstructions = true;\r\n            }\r\n\r\n            if(leftChar == \"a\"){\r\n                obstructions = true;\r\n            }\r\n            else{\r\n                x++;\r\n                leftChar = prevChar(leftChar);\r\n            }\r\n        }\r\n\r\n        // Moves down and right\r\n        obstructions = false;\r\n        x = -1;\r\n        rightChar = nextChar(queen.charAt(0));\r\n\r\n        while(!obstructions && (parseInt(queen.charAt(1)) + x) >= 1 && queen.charAt(0) != \"h\"){\r\n            let square = rightChar + (parseInt(queen.charAt(1)) + x);\r\n\r\n            if(data[square] == \"\" && !inCheckAfterMove(\"queens\", queen, square, theirPieces)){\r\n                legalMoves.push(square);\r\n            }\r\n            else if (data[square].charAt(0) == myColour.charAt(0)){\r\n                obstructions = true;\r\n            }\r\n            else if(data[square] != \"\"){\r\n                let theirNewPieces = capturePiece(theirPieces, getPieceTypeByLetter(data[square].charAt(1)), square);\r\n                if(!inCheckAfterMove(\"queens\", queen, square, theirNewPieces)){\r\n                    legalMoves.push(square);\r\n                }\r\n                obstructions = true;\r\n            }\r\n\r\n            if(rightChar == \"h\"){\r\n                obstructions = true;\r\n            }\r\n            else{\r\n                x--;\r\n                rightChar = nextChar(rightChar);\r\n            }\r\n        }\r\n\r\n        // Moves down and left\r\n\r\n        obstructions = false;\r\n        x = -1;\r\n        leftChar = prevChar(queen.charAt(0));\r\n\r\n        while(!obstructions && (parseInt(queen.charAt(1)) + x) >= 1 && queen.charAt(0) != \"a\"){\r\n            let square = leftChar + (parseInt(queen.charAt(1)) + x);\r\n\r\n            if(data[square] == \"\" && !inCheckAfterMove(\"queens\", queen, square, theirPieces)){\r\n                legalMoves.push(square);\r\n            }\r\n            else if (data[square].charAt(0) == myColour.charAt(0)){\r\n                obstructions = true;\r\n            }\r\n            else if(data[square] != \"\"){\r\n                let theirNewPieces = capturePiece(theirPieces, getPieceTypeByLetter(data[square].charAt(1)), square);\r\n                if(!inCheckAfterMove(\"queens\", queen, square, theirNewPieces)){\r\n                    legalMoves.push(square);\r\n                }\r\n                obstructions = true;\r\n            }\r\n\r\n            if(leftChar == \"a\"){\r\n                obstructions = true;\r\n            }\r\n            else{\r\n                x--;\r\n                leftChar = prevChar(leftChar);\r\n            }\r\n        }\r\n\r\n        result.queens[queen] = [...legalMoves];\r\n    }\r\n\r\n    /* #############################################     KING    ################################################################ */\r\n    if(Object.keys(myPieces.king).length == 0) return result;\r\n\r\n    let king = Object.keys(myPieces.king)[0];\r\n\r\n    legalMoves = [];\r\n\r\n    // Up\r\n    let square = king.charAt(0) + (parseInt(king.charAt(1)) + 1);\r\n\r\n    if(parseInt(king.charAt(1)) < 8 && data[square] == \"\" && !inCheckAfterMove(\"king\", king, square, theirPieces)) {\r\n        legalMoves.push(square)\r\n    }\r\n    else if(parseInt(king.charAt(1)) < 8 && data[square].charAt(0) != myColour.charAt(0) && data[square] != \"\"){\r\n        let theirNewPieces = capturePiece(theirPieces, getPieceTypeByLetter(data[square].charAt(1)), square);\r\n        if(!inCheckAfterMove(\"king\", king, square, theirNewPieces)){\r\n            legalMoves.push(square);\r\n        }\r\n    }\r\n\r\n    // Down\r\n\r\n    square = king.charAt(0) + (parseInt(king.charAt(1)) - 1);\r\n\r\n    if(parseInt(king.charAt(1)) > 1 && data[square] == \"\" && !inCheckAfterMove(\"king\", king, square, theirPieces)) {\r\n        legalMoves.push(square)\r\n    }\r\n    else if(parseInt(king.charAt(1)) > 1 && data[square].charAt(0) != myColour.charAt(0) && data[square] != \"\"){\r\n        let theirNewPieces = capturePiece(theirPieces, getPieceTypeByLetter(data[square].charAt(1)), square);\r\n        if(!inCheckAfterMove(\"king\", king, square, theirNewPieces)){\r\n            legalMoves.push(square);\r\n        }\r\n    }\r\n\r\n    // Left\r\n\r\n    square = prevChar(king.charAt(0)) + king.charAt(1);\r\n\r\n    if(king.charAt(0) != \"a\" && data[square] == \"\" && !inCheckAfterMove(\"king\", king, square, theirPieces)) {\r\n        legalMoves.push(square)\r\n    }\r\n    else if(king.charAt(0) != \"a\" && data[square].charAt(0) != myColour.charAt(0) && data[square] != \"\"){\r\n        let theirNewPieces = capturePiece(theirPieces, getPieceTypeByLetter(data[square].charAt(1)), square);\r\n        if(!inCheckAfterMove(\"king\", king, square, theirNewPieces)){\r\n            legalMoves.push(square);\r\n        }\r\n    }\r\n\r\n    // Right\r\n\r\n    square = nextChar(king.charAt(0)) + king.charAt(1);\r\n\r\n    if(king.charAt(0) != \"h\" && data[square] == \"\" && !inCheckAfterMove(\"king\", king, square, theirPieces)) {\r\n        legalMoves.push(square)\r\n    }\r\n    else if(king.charAt(0) != \"h\" && data[square].charAt(0) != myColour.charAt(0) && data[square] != \"\"){\r\n        let theirNewPieces = capturePiece(theirPieces, getPieceTypeByLetter(data[square].charAt(1)), square);\r\n        if(!inCheckAfterMove(\"king\", king, square, theirNewPieces)){\r\n            legalMoves.push(square);\r\n        }\r\n    }\r\n\r\n    // Up and Right\r\n\r\n    square = nextChar(king.charAt(0)) + (parseInt(king.charAt(1)) + 1);\r\n\r\n    if(parseInt(king.charAt(1)) < 8 && king.charAt(0) != \"h\" && data[square] == \"\" && !inCheckAfterMove(\"king\", king, square, theirPieces)) {\r\n        legalMoves.push(square)\r\n    }\r\n    else if(parseInt(king.charAt(1)) < 8 && king.charAt(0) != \"h\" && data[square].charAt(0) != myColour.charAt(0) && data[square] != \"\"){\r\n        let theirNewPieces = capturePiece(theirPieces, getPieceTypeByLetter(data[square].charAt(1)), square);\r\n        if(!inCheckAfterMove(\"king\", king, square, theirNewPieces)){\r\n            legalMoves.push(square);\r\n        }\r\n    }\r\n\r\n    // Up and Left\r\n\r\n    square = prevChar(king.charAt(0)) + (parseInt(king.charAt(1)) + 1);\r\n\r\n    if(parseInt(king.charAt(1)) < 8 && king.charAt(0) != \"a\" && data[square] == \"\" && !inCheckAfterMove(\"king\", king, square, theirPieces)) {\r\n        legalMoves.push(square)\r\n    }\r\n    else if(parseInt(king.charAt(1)) < 8 && king.charAt(0) != \"a\" && data[square].charAt(0) != myColour.charAt(0) && data[square] != \"\"){\r\n        let theirNewPieces = capturePiece(theirPieces, getPieceTypeByLetter(data[square].charAt(1)), square);\r\n        if(!inCheckAfterMove(\"king\", king, square, theirNewPieces)){\r\n            legalMoves.push(square);\r\n        }\r\n    }\r\n\r\n    // Down and Right\r\n\r\n    square = nextChar(king.charAt(0)) + (parseInt(king.charAt(1)) - 1);\r\n\r\n    if(parseInt(king.charAt(1)) > 1 && king.charAt(0) != \"h\" && data[square] == \"\" && !inCheckAfterMove(\"king\", king, square, theirPieces)) {\r\n        legalMoves.push(square)\r\n    }\r\n    else if(parseInt(king.charAt(1)) > 1 && king.charAt(0) != \"h\" && data[square].charAt(0) != myColour.charAt(0) && data[square] != \"\"){\r\n        let theirNewPieces = capturePiece(theirPieces, getPieceTypeByLetter(data[square].charAt(1)), square);\r\n        if(!inCheckAfterMove(\"king\", king, square, theirNewPieces)){\r\n            legalMoves.push(square);\r\n        }\r\n    }\r\n\r\n    // Down and Left\r\n\r\n    square = prevChar(king.charAt(0)) + (parseInt(king.charAt(1)) - 1);\r\n\r\n    if(parseInt(king.charAt(1)) > 1 && king.charAt(0) != \"a\" && data[square] == \"\" && !inCheckAfterMove(\"king\", king, square, theirPieces)) {\r\n        legalMoves.push(square)\r\n    }\r\n    else if(parseInt(king.charAt(1)) > 1 && king.charAt(0) != \"a\" && data[square].charAt(0) != myColour.charAt(0) && data[square] != \"\"){\r\n        let theirNewPieces = capturePiece(theirPieces, getPieceTypeByLetter(data[square].charAt(1)), square);\r\n        if(!inCheckAfterMove(\"king\", king, square, theirNewPieces)){\r\n            legalMoves.push(square);\r\n        }\r\n    }\r\n\r\n    if(!inCheckAfterMove(\"king\", king, king, theirPieces)){\r\n        // White Castle short\r\n        if(myColour == \"white\" && whiteCastlingRights[0]){\r\n            if(data[\"f1\"] == \"\" && data[\"g1\"] == \"\" && !inCheckAfterMove(\"king\", king, \"f1\", theirPieces) && !inCheckAfterMove(\"king\", king, \"g1\", theirPieces)){\r\n                legalMoves.push(\"O-O\");\r\n            }\r\n        }\r\n\r\n        // White Castle long\r\n        if(myColour == \"white\" && whiteCastlingRights[1]){\r\n            if(data[\"d1\"] == \"\" && data[\"c1\"] == \"\" && data[\"b1\"] == \"\" && !inCheckAfterMove(\"king\", king, \"d1\", theirPieces) && !inCheckAfterMove(\"king\", king, \"c1\", theirPieces)){\r\n                legalMoves.push(\"O-O-O\");\r\n            }\r\n        }\r\n\r\n        // Black Castle short\r\n        if(myColour == \"black\" && blackCastlingRights[0]){\r\n            if(data[\"f8\"] == \"\" && data[\"g8\"] == \"\" && !inCheckAfterMove(\"king\", king, \"f8\", theirPieces) && !inCheckAfterMove(\"king\", king, \"g8\", theirPieces)){\r\n                legalMoves.push(\"O-O\");\r\n            }\r\n        }\r\n\r\n        // Black Castle long\r\n        if(myColour == \"black\" && blackCastlingRights[1]){\r\n            if(data[\"d8\"] == \"\" && data[\"c8\"] == \"\" && data[\"b8\"] == \"\" && !inCheckAfterMove(\"king\", king, \"d8\", theirPieces) && !inCheckAfterMove(\"king\", king, \"c8\", theirPieces)){\r\n                legalMoves.push(\"O-O-O\");\r\n            }\r\n        }\r\n    }\r\n\r\n    result.king[king] = [...legalMoves];\r\n\r\n    return result;\r\n\r\n}\r\n\r\n// change so that not calculating moves on each mouse click - must always update both at same time bc of castling and giving check at the same time\r\nconst updateLegalMoves = (data, moveHistory) => {\r\n    whitePieces = calculateLegalMoves(whitePieces, blackPieces, \"white\", data, moveHistory);\r\n    blackPieces = calculateLegalMoves(blackPieces, whitePieces, \"black\", data, moveHistory);\r\n}\r\n\r\nconst getNewMoveHistory = (data, destination, myPieces, player, moveHistory) => {\r\n    let newMoveHistory = [...moveHistory];\r\n    let moveName = generateMoveName(data, destination, myPieces, player);\r\n    let move;\r\n    if(moveName != \"O-O\" && moveName != \"O-O-O\"){\r\n        move = {initialPos: selectedPieceLoc, destination: destination, piece: pieceSelected, name: moveName};\r\n    }\r\n    else{\r\n        move = {initialPos: selectedPieceLoc, destination: moveName, name: moveName};\r\n    }\r\n    newMoveHistory.push(move);\r\n    return newMoveHistory;\r\n}\r\n\r\nconst getMoveSuffix = (myPieces, theirPieces, promotionPiece = \"\") => {\r\n    let suffix = \"\";\r\n\r\n    if(promotionPiece != \"\"){\r\n        suffix += \"=\" + promotionPiece.toUpperCase();\r\n    }\r\n\r\n    if(iAmCheckmated(theirPieces, myPieces)){\r\n        suffix += \"#\";\r\n    }\r\n    else if(myKingInCheck(theirPieces, myPieces)){\r\n        suffix += \"+\";\r\n    }\r\n\r\n    return suffix;\r\n}\r\n\r\nconst updateMoveHistory = (moveHistory, setMoveHistory, suffix) => {\r\n    let newMoveHistory = [...moveHistory];\r\n    if(newMoveHistory.length > 0){\r\n        newMoveHistory[newMoveHistory.length-1].name += suffix;\r\n        setMoveHistory(newMoveHistory);\r\n    }\r\n    \r\n}\r\n\r\nconst generateMoveName = (data, destination, myPieces, player) => {\r\n    let theirColour;\r\n    let suffix = \"\";\r\n    \r\n    if(player == \"white\"){\r\n        theirColour = \"black\";\r\n    } \r\n    else theirColour = \"white\";\r\n\r\n    switch(pieceSelected.charAt(1)){\r\n        case \"p\":\r\n\r\n            if(selectedPieceLoc.charAt(0) != destination.charAt(0)){\r\n                return `${selectedPieceLoc.charAt(0)}x${destination}`;\r\n            }\r\n            \r\n            return destination;\r\n            \r\n        case \"n\":\r\n            for(let knight in myPieces.knights){\r\n                if(knight != selectedPieceLoc && myPieces.knights[knight].includes(destination)){\r\n                    if(knight.charAt(0) == selectedPieceLoc.charAt(0)){\r\n                        if(data[destination].charAt(0) == theirColour.charAt(0)){\r\n                            return `N${selectedPieceLoc.charAt(1)}x${destination}`;\r\n                        }\r\n                        return `N${selectedPieceLoc.charAt(1)}${destination}`;\r\n                    }\r\n                    if(data[destination].charAt(0) == theirColour.charAt(0)){\r\n                        return `N${selectedPieceLoc.charAt(0)}x${destination}`;\r\n                    }\r\n                    return `N${selectedPieceLoc.charAt(0)}${destination}`;\r\n                }\r\n            }\r\n\r\n            if(data[destination].charAt(0) == theirColour.charAt(0)){\r\n                return `Nx${destination}`;\r\n            }\r\n            \r\n            return `N${destination}`;\r\n            \r\n        case \"b\":\r\n            for(let bishop in myPieces.bishops){\r\n                if(bishop != selectedPieceLoc && myPieces.bishops[bishop].includes(destination)){\r\n                    if(bishop.charAt(0) == selectedPieceLoc.charAt(0)){\r\n                        if(data[destination].charAt(0) == theirColour.charAt(0)){\r\n                            return `B${selectedPieceLoc.charAt(1)}x${destination}`;\r\n                        }\r\n                        return `B${selectedPieceLoc.charAt(1)}${destination}`;\r\n                    }\r\n                    if(data[destination].charAt(0) == theirColour.charAt(0)){\r\n                        return `B${selectedPieceLoc.charAt(0)}x${destination}`;\r\n                    }\r\n                    return `B${selectedPieceLoc.charAt(0)}${destination}`;\r\n                }\r\n            }\r\n\r\n            if(data[destination].charAt(0) == theirColour.charAt(0)){\r\n                return `Bx${destination}`;\r\n            }\r\n            \r\n            return `B${destination}`;\r\n            \r\n        case \"r\":\r\n            if(player == \"white\" && whiteCastlingRights[0] && selectedPieceLoc == \"h1\"){\r\n                whiteCastlingRights[0] = false;\r\n            }\r\n            else if(player == \"white\" && whiteCastlingRights[1] && selectedPieceLoc == \"a1\"){\r\n                whiteCastlingRights[1] = false;\r\n            }\r\n            else if(player == \"black\" && blackCastlingRights[0] && selectedPieceLoc == \"h8\"){\r\n                blackCastlingRights[0] = false;\r\n            }\r\n            else if(player == \"black\" && blackCastlingRights[1] && selectedPieceLoc == \"a8\"){\r\n                blackCastlingRights[1] = false;\r\n            }\r\n\r\n            for(let rook in myPieces.rooks){\r\n                if(rook != selectedPieceLoc && myPieces.rooks[rook].includes(destination)){\r\n                    if(rook.charAt(0) == selectedPieceLoc.charAt(0)){\r\n                        if(data[destination].charAt(0) == theirColour.charAt(0)){\r\n                            return `R${selectedPieceLoc.charAt(1)}x${destination}`;\r\n                        }\r\n                        return `R${selectedPieceLoc.charAt(1)}${destination}`;\r\n                    }\r\n                    if(data[destination].charAt(0) == theirColour.charAt(0)){\r\n                        return `R${selectedPieceLoc.charAt(0)}x${destination}`;\r\n                    }\r\n                    return `R${selectedPieceLoc.charAt(0)}${destination}`;\r\n                }\r\n            }\r\n\r\n            if(data[destination].charAt(0) == theirColour.charAt(0)){\r\n                return `Rx${destination}`;\r\n            }\r\n            \r\n            return `R${destination}`;\r\n            \r\n        case \"q\":\r\n            for(let queen in myPieces.queens){\r\n                if(queen != selectedPieceLoc && myPieces.queens[queen].includes(destination)){\r\n                    if(queen.charAt(0) == selectedPieceLoc.charAt(0)){\r\n                        if(data[destination].charAt(0) == theirColour.charAt(0)){\r\n                            return `Q${selectedPieceLoc.charAt(1)}x${destination}`;\r\n                        }\r\n                        return `Q${selectedPieceLoc.charAt(1)}${destination}`;\r\n                    }\r\n                    if(data[destination].charAt(0) == theirColour.charAt(0)){\r\n                        return `Q${selectedPieceLoc.charAt(0)}x${destination}`;\r\n                    }\r\n                    return `Q${selectedPieceLoc.charAt(0)}${destination}`;\r\n                }\r\n            }\r\n\r\n            if(data[destination].charAt(0) == theirColour.charAt(0)){\r\n                return `Qx${destination}`;\r\n            }\r\n            \r\n            return `Q${destination}`;\r\n            \r\n        case \"k\":\r\n            // turn off castling rights\r\n\r\n            if(player == \"white\" && (whiteCastlingRights[0] || whiteCastlingRights[1])){\r\n                whiteCastlingRights = [false, false];\r\n            }\r\n            else if(player == \"black\" && (blackCastlingRights[0] || blackCastlingRights[1])){\r\n                blackCastlingRights = [false, false];\r\n            }\r\n\r\n            // if castles\r\n            if(selectedPieceLoc.charAt(0) == \"e\" && destination.charAt(0) == \"g\"){\r\n                return \"O-O\";\r\n            }\r\n            else if(selectedPieceLoc.charAt(0) == \"e\" && destination.charAt(0) == \"c\"){\r\n                return \"O-O-O\";\r\n            }\r\n\r\n            // capture\r\n\r\n            if(data[destination].charAt(0) == theirColour.charAt(0)){\r\n                return `Kx${destination}`;\r\n            }\r\n\r\n            // move to empty square\r\n            \r\n            return `K${destination}`;\r\n\r\n            \r\n    }\r\n}\r\n\r\nconst onClick = ([piece, player, setPlayer, pieceLoc, currentSquareTypes, setSquareTypes, data, setData, promotion, setPromotion, setPromotionColour, moveHistory, setMoveHistory, material, setMaterial]) => {\r\n\r\n    if(promotion == \"enabled\") return;\r\n\r\n    let myPieces, theirPieces;\r\n    let nextPlayer;\r\n\r\n    const updatePieces = () => {\r\n        if(player == \"white\"){\r\n            myPieces = whitePieces;\r\n            theirPieces = blackPieces;\r\n            nextPlayer = \"black\";\r\n        }\r\n        else {\r\n            myPieces = blackPieces;\r\n            theirPieces = whitePieces;\r\n            nextPlayer = \"white\";\r\n        }\r\n    }\r\n\r\n    updatePieces();\r\n\r\n    let newSquareTypes = {...currentSquareTypes};\r\n\r\n    const deselectSelectedPiece = () => {\r\n        newSquareTypes[selectedPieceLoc] = newSquareTypes[selectedPieceLoc].substring(0, newSquareTypes[selectedPieceLoc].indexOf(\"-highlighted\"));\r\n        setSquareTypes(newSquareTypes);\r\n\r\n        pieceSelected = \"\";\r\n        selectedPieceLoc = \"\";\r\n    }\r\n\r\n    const selectNewPiece = () => {\r\n        pieceSelected = piece;\r\n        selectedPieceLoc = pieceLoc;\r\n\r\n        \r\n        newSquareTypes[pieceLoc] += \"-highlighted\";\r\n        setSquareTypes(newSquareTypes);\r\n    }\r\n\r\n    const checkForPromotion = () => {\r\n        \r\n        if(pieceSelected.charAt(1) == \"p\"){\r\n            if(player == \"white\" && pieceLoc.charAt(1) == \"8\"){\r\n                return true;\r\n            }\r\n            else if(player == \"black\" && pieceLoc.charAt(1) == \"1\"){\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // castle\r\n    if(pieceSelected.charAt(1) == \"k\"){\r\n        let kingLoc = Object.keys(myPieces.king)[0];\r\n        if(player == \"white\"){\r\n            if(myPieces.king[kingLoc].includes(\"O-O\") && (pieceLoc == \"g1\" || pieceLoc == \"h1\")){\r\n            \r\n                //move piece\r\n                let newData = {...data};\r\n                newData[selectedPieceLoc] = \"\";\r\n                newData[\"h1\"] = \"\";\r\n                newData[\"g1\"] = pieceSelected;\r\n                newData[\"f1\"] = \"wr\";\r\n\r\n                delete myPieces.king[selectedPieceLoc];\r\n                myPieces.king[\"g1\"] = [];\r\n\r\n                delete myPieces.rooks[\"h1\"];\r\n                myPieces.rooks[\"f1\"] = [];\r\n\r\n                setData(newData);\r\n                let newMoveHistory = getNewMoveHistory(data, pieceLoc, myPieces, player, moveHistory);\r\n                updateLegalMoves(newData, newMoveHistory);\r\n                updatePieces();\r\n                updateMoveHistory(newMoveHistory, setMoveHistory, getMoveSuffix(myPieces, theirPieces));\r\n                setPlayer(nextPlayer);\r\n                deselectSelectedPiece();\r\n\r\n                whiteCastlingRights = [false, false];\r\n                return;\r\n            }\r\n            else if(myPieces.king[kingLoc].includes(\"O-O-O\") && (pieceLoc == \"c1\" || pieceLoc == \"a1\")){\r\n                //move piece\r\n                let newData = {...data};\r\n                newData[selectedPieceLoc] = \"\";\r\n                newData[\"a1\"] = \"\";\r\n                newData[\"c1\"] = pieceSelected;\r\n                newData[\"d1\"] = \"wr\";\r\n\r\n                delete myPieces.king[selectedPieceLoc];\r\n                myPieces.king[\"c1\"] = [];\r\n\r\n                delete myPieces.rooks[\"a1\"];\r\n                myPieces.rooks[\"d1\"] = [];\r\n\r\n                setData(newData);\r\n                let newMoveHistory = getNewMoveHistory(data, pieceLoc, myPieces, player, moveHistory);\r\n                updateLegalMoves(newData, newMoveHistory);\r\n                updatePieces();\r\n                updateMoveHistory(newMoveHistory, setMoveHistory, getMoveSuffix(myPieces, theirPieces));\r\n                setPlayer(nextPlayer);\r\n                deselectSelectedPiece();\r\n\r\n                whiteCastlingRights = [false, false];\r\n                return;\r\n            }\r\n        }\r\n        else{\r\n            if(myPieces.king[kingLoc].includes(\"O-O\") && (pieceLoc == \"g8\" || pieceLoc == \"h8\")){\r\n            \r\n                //move piece\r\n                let newData = {...data};\r\n                newData[selectedPieceLoc] = \"\";\r\n                newData[\"h8\"] = \"\";\r\n                newData[\"g8\"] = pieceSelected;\r\n                newData[\"f8\"] = \"br\";\r\n\r\n                delete myPieces.king[selectedPieceLoc];\r\n                myPieces.king[\"g8\"] = [];\r\n\r\n                delete myPieces.rooks[\"h8\"];\r\n                myPieces.rooks[\"f8\"] = [];\r\n\r\n                setData(newData);\r\n                let newMoveHistory = getNewMoveHistory(data, pieceLoc, myPieces, player, moveHistory);\r\n                updateLegalMoves(newData, newMoveHistory);\r\n                updatePieces();\r\n                updateMoveHistory(newMoveHistory, setMoveHistory, getMoveSuffix(myPieces, theirPieces));\r\n                setPlayer(nextPlayer);\r\n                deselectSelectedPiece();\r\n\r\n                blackCastlingRights = [false, false];\r\n                return;\r\n            }\r\n            else if(myPieces.king[kingLoc].includes(\"O-O-O\") && (pieceLoc == \"c8\" || pieceLoc == \"a8\")){\r\n                //move piece\r\n                let newData = {...data};\r\n                newData[selectedPieceLoc] = \"\";\r\n                newData[\"a8\"] = \"\";\r\n                newData[\"c8\"] = pieceSelected;\r\n                newData[\"d8\"] = \"br\";\r\n\r\n                delete myPieces.king[selectedPieceLoc];\r\n                myPieces.king[\"c8\"] = [];\r\n\r\n                delete myPieces.rooks[\"a8\"];\r\n                myPieces.rooks[\"d8\"] = [];\r\n\r\n                setData(newData);\r\n                let newMoveHistory = getNewMoveHistory(data, pieceLoc, myPieces, player, moveHistory);\r\n                updateLegalMoves(newData, newMoveHistory);\r\n                updatePieces();\r\n                updateMoveHistory(newMoveHistory, setMoveHistory, getMoveSuffix(myPieces, theirPieces));\r\n                setPlayer(nextPlayer);\r\n                deselectSelectedPiece();\r\n\r\n                blackCastlingRights = [false, false];\r\n                return;\r\n            }\r\n        }\r\n        \r\n    }\r\n\r\n    // En Passant\r\n    if(pieceSelected.charAt(1) == \"p\"){\r\n        if(myPieces.pawns[selectedPieceLoc].includes(\"x->\")){\r\n            let squaresUp = 1;\r\n            if(pieceSelected.charAt(0) == \"b\"){\r\n                squaresUp = -1;\r\n            }\r\n\r\n            if(pieceLoc == (nextChar(selectedPieceLoc.charAt(0)) + (parseInt(selectedPieceLoc.charAt(1)) + squaresUp))){\r\n                //move piece\r\n                let newData = {...data};\r\n                newData[selectedPieceLoc] = \"\";\r\n                newData[pieceLoc] = pieceSelected;\r\n                let theirPawnLoc = pieceLoc.charAt(0) + (parseInt(pieceLoc.charAt(1))-squaresUp);\r\n                newData[theirPawnLoc] = \"\";\r\n\r\n                if(player == \"white\"){\r\n                    let newMaterial = {...material};\r\n                    newMaterial.white.push(\"p\");\r\n                    setMaterial(newMaterial);\r\n                }\r\n                else {\r\n                    let newMaterial = {...material};\r\n                    newMaterial.black.push(\"p\");\r\n                    setMaterial(newMaterial);\r\n                }\r\n                \r\n\r\n                delete myPieces[getPieceTypeByLetter(pieceSelected.charAt(1))][selectedPieceLoc];\r\n                myPieces[getPieceTypeByLetter(pieceSelected.charAt(1))][pieceLoc] = [];\r\n\r\n                \r\n                delete theirPieces[getPieceTypeByLetter(data[theirPawnLoc].charAt(1))][theirPawnLoc];\r\n\r\n\r\n                setData(newData);\r\n                let newMoveHistory = getNewMoveHistory(data, pieceLoc, myPieces, player, moveHistory);\r\n                updateLegalMoves(newData, newMoveHistory);\r\n                updatePieces();\r\n                updateMoveHistory(newMoveHistory, setMoveHistory, getMoveSuffix(myPieces, theirPieces));\r\n                setPlayer(nextPlayer);\r\n                deselectSelectedPiece();\r\n\r\n                return;\r\n            }\r\n            \r\n        }\r\n        else if(myPieces.pawns[selectedPieceLoc].includes(\"<-x\")){\r\n            let squaresUp = 1;\r\n            if(pieceSelected.charAt(0) == \"b\"){\r\n                squaresUp = -1;\r\n            }\r\n\r\n            if(pieceLoc == (prevChar(selectedPieceLoc.charAt(0)) + (parseInt(selectedPieceLoc.charAt(1)) + squaresUp))){\r\n                //move piece\r\n                let newData = {...data};\r\n                newData[selectedPieceLoc] = \"\";\r\n                newData[pieceLoc] = pieceSelected;\r\n                let theirPawnLoc = pieceLoc.charAt(0) + (parseInt(pieceLoc.charAt(1))-squaresUp);\r\n                newData[theirPawnLoc] = \"\";\r\n\r\n                if(player == \"white\"){\r\n                    let newMaterial = {...material};\r\n                    newMaterial.white.push(\"p\");\r\n                    setMaterial(newMaterial);\r\n                }\r\n                else {\r\n                    let newMaterial = {...material};\r\n                    newMaterial.black.push(\"p\");\r\n                    setMaterial(newMaterial);\r\n                }\r\n                \r\n\r\n                delete myPieces[getPieceTypeByLetter(pieceSelected.charAt(1))][selectedPieceLoc];\r\n                myPieces[getPieceTypeByLetter(pieceSelected.charAt(1))][pieceLoc] = [];\r\n\r\n\r\n                \r\n                delete theirPieces[getPieceTypeByLetter(data[theirPawnLoc].charAt(1))][theirPawnLoc];\r\n\r\n\r\n                setData(newData);\r\n                let newMoveHistory = getNewMoveHistory(data, pieceLoc, myPieces, player, moveHistory);\r\n                updateLegalMoves(newData, newMoveHistory);\r\n                updatePieces();\r\n                updateMoveHistory(newMoveHistory, setMoveHistory, getMoveSuffix(myPieces, theirPieces));\r\n                setPlayer(nextPlayer);\r\n                deselectSelectedPiece();\r\n\r\n                return;\r\n            }\r\n            \r\n        }\r\n    }\r\n\r\n    // move a piece to empty square\r\n    if(piece == \"\" && pieceSelected != \"\") {\r\n\r\n        // move piece if possible\r\n        if(myPieces[getPieceTypeByLetter(pieceSelected.charAt(1))][selectedPieceLoc].includes(pieceLoc)){\r\n\r\n            if(checkForPromotion()){\r\n                isCapture = false;\r\n                targetLoc = pieceLoc;\r\n                targetPiece = \"\";\r\n                setPromotionColour(player.charAt(0));\r\n                setPromotion(\"enabled\");\r\n                return;\r\n            }\r\n\r\n            //move piece\r\n            let newData = {...data};\r\n            newData[selectedPieceLoc] = \"\";\r\n            newData[pieceLoc] = pieceSelected;\r\n\r\n            delete myPieces[getPieceTypeByLetter(pieceSelected.charAt(1))][selectedPieceLoc];\r\n            myPieces[getPieceTypeByLetter(pieceSelected.charAt(1))][pieceLoc] = [];\r\n\r\n            setData(newData);\r\n            let newMoveHistory = getNewMoveHistory(data, pieceLoc, myPieces, player, moveHistory);\r\n            updateLegalMoves(newData, newMoveHistory);\r\n            updatePieces();\r\n            updateMoveHistory(newMoveHistory, setMoveHistory, getMoveSuffix(myPieces, theirPieces));\r\n            setPlayer(nextPlayer);\r\n\r\n        }\r\n\r\n        deselectSelectedPiece();\r\n    }\r\n    // capture piece\r\n    else if(piece.charAt(0) == nextPlayer.charAt(0) && pieceSelected != \"\"){\r\n        // move piece if possible\r\n        if(myPieces[getPieceTypeByLetter(pieceSelected.charAt(1))][selectedPieceLoc].includes(pieceLoc)){\r\n\r\n            if(checkForPromotion()){\r\n                isCapture = true;\r\n                targetLoc = pieceLoc;\r\n                targetPiece = piece;\r\n                setPromotionColour(player.charAt(0));\r\n                setPromotion(\"enabled\");\r\n                return;\r\n            }\r\n\r\n\r\n            //move piece\r\n            let newData = {...data};\r\n            newData[selectedPieceLoc] = \"\";\r\n            newData[pieceLoc] = pieceSelected;\r\n\r\n            if(player == \"white\"){\r\n                let newMaterial = {...material};\r\n                newMaterial.white.push(data[pieceLoc].charAt(1));\r\n                setMaterial(newMaterial);\r\n            }\r\n            else {\r\n                let newMaterial = {...material};\r\n                newMaterial.black.push(data[pieceLoc].charAt(1));\r\n                setMaterial(newMaterial);\r\n            }\r\n\r\n            delete myPieces[getPieceTypeByLetter(pieceSelected.charAt(1))][selectedPieceLoc];\r\n            myPieces[getPieceTypeByLetter(pieceSelected.charAt(1))][pieceLoc] = [];\r\n\r\n            delete theirPieces[getPieceTypeByLetter(piece.charAt(1))][pieceLoc];\r\n\r\n\r\n            setData(newData);\r\n            let newMoveHistory = getNewMoveHistory(data, pieceLoc, myPieces, player, moveHistory);\r\n            updateLegalMoves(newData, newMoveHistory);\r\n            updatePieces();\r\n            updateMoveHistory(newMoveHistory, setMoveHistory, getMoveSuffix(myPieces, theirPieces));\r\n            setPlayer(nextPlayer);\r\n\r\n        }\r\n\r\n        deselectSelectedPiece();\r\n    }\r\n\r\n    // select a piece when no other is selected\r\n    else if((player == \"white\" && piece.charAt(0) == 'w' || player == \"black\" && piece.charAt(0) == 'b') && pieceSelected == \"\"){\r\n        selectNewPiece();\r\n    }\r\n\r\n    // deselect the selected piece by clicking on it\r\n    else if((player == \"white\" && piece.charAt(0) == 'w' || player == \"black\" && piece.charAt(0) == 'b') && pieceSelected != \"\" && selectedPieceLoc == pieceLoc){\r\n        deselectSelectedPiece();\r\n    }\r\n\r\n    // deselect the selected piece and select a different piece\r\n    else if((player == \"white\" && piece.charAt(0) == 'w' || player == \"black\" && piece.charAt(0) == 'b') && pieceSelected != \"\" && piece != \"\" && selectedPieceLoc != pieceLoc){\r\n        deselectSelectedPiece();\r\n        selectNewPiece();\r\n    }\r\n    \r\n}\r\n\r\nconst Board = (props) => {\r\n\r\n    const board = [];\r\n    \r\n    let [player, setPlayer] = useState(\"white\");\r\n    \r\n    let row, squareType, letter, pieceName, firstSquareLight = true;\r\n    \r\n\r\n    let newSquareTypes = {};\r\n    for(let i = 0; i < 8; i++){\r\n        letter = \"a\";\r\n        let lightSquare = firstSquareLight;\r\n        for(let j = 0; j < 8; j++){\r\n            if(lightSquare){\r\n                squareType = \"light-square\";\r\n            }\r\n            else {\r\n                squareType = \"dark-square\";\r\n            }\r\n            newSquareTypes[letter+(8-i)] = squareType;\r\n\r\n\r\n            letter = nextChar(letter);\r\n            lightSquare = !lightSquare;\r\n        }\r\n        firstSquareLight = !firstSquareLight;\r\n    }\r\n\r\n    let startingPos = {\r\n        a1: \"wr\", b1: \"wn\", c1: \"wb\", d1: \"wq\", e1: \"wk\", f1: \"wb\", g1: \"wn\", h1: \"wr\",\r\n        a2: \"wp\", b2: \"wp\", c2: \"wp\", d2: \"wp\", e2: \"wp\", f2: \"wp\", g2: \"wp\", h2: \"wp\",\r\n        a3: \"\", b3: \"\", c3: \"\", d3: \"\", e3: \"\", f3: \"\", g3: \"\", h3: \"\",\r\n        a4: \"\", b4: \"\", c4: \"\", d4: \"\", e4: \"\", f4: \"\", g4: \"\", h4: \"\",\r\n        a5: \"\", b5: \"\", c5: \"\", d5: \"\", e5: \"\", f5: \"\", g5: \"\", h5: \"\",\r\n        a6: \"\", b6: \"\", c6: \"\", d6: \"\", e6: \"\", f6: \"\", g6: \"\", h6: \"\",\r\n        a7: \"bp\", b7: \"bp\", c7: \"bp\", d7: \"bp\", e7: \"bp\", f7: \"bp\", g7: \"bp\", h7: \"bp\",\r\n        a8: \"br\", b8: \"bn\", c8: \"bb\", d8: \"bq\", e8: \"bk\", f8: \"bb\", g8: \"bn\", h8: \"br\",\r\n    };\r\n\r\n    let [currentSquareTypes, setSquareTypes] = useState(newSquareTypes);\r\n    let [data, setData] = useState(startingPos);\r\n\r\n    updateLegalMoves(data, props.moveHistory);\r\n\r\n    useEffect(() => {\r\n        if(props.promotionPiece != \"\"){\r\n            let myPieces, theirPieces, nextPlayer, newData = {...data}, newPiece = props.promotionPiece;\r\n            if(player == \"white\"){\r\n                myPieces = whitePieces;\r\n                theirPieces = blackPieces;\r\n                nextPlayer = \"black\";\r\n            }\r\n            else {\r\n                myPieces = blackPieces;\r\n                theirPieces = whitePieces;\r\n                nextPlayer = \"white\";\r\n            }\r\n\r\n            if(!isCapture){\r\n                //move piece\r\n                newData[selectedPieceLoc] = \"\";\r\n                newData[targetLoc] = player.charAt(0) + props.promotionPiece;\r\n\r\n                if(player == \"white\"){\r\n                    let newMaterial = {...props.material};\r\n                    newMaterial.white.push(props.promotionPiece);\r\n                    props.setMaterial(newMaterial);\r\n                }\r\n                else {\r\n                    let newMaterial = {...props.material};\r\n                    newMaterial.white.push(props.promotionPiece);\r\n                    props.setMaterial(newMaterial);\r\n                }\r\n\r\n                delete myPieces[getPieceTypeByLetter(pieceSelected.charAt(1))][selectedPieceLoc];\r\n                myPieces[getPieceTypeByLetter(props.promotionPiece)][targetLoc] = [];           \r\n            }\r\n            else {\r\n                //move piece\r\n                newData[selectedPieceLoc] = \"\";\r\n                newData[targetLoc] = player.charAt(0) + props.promotionPiece;\r\n\r\n                if(player == \"white\"){\r\n                    let newMaterial = {...props.material};\r\n                    newMaterial.white.push(data[targetLoc].charAt(1));\r\n                    newMaterial.white.push(props.promotionPiece);\r\n                    props.setMaterial(newMaterial);\r\n                }\r\n                else {\r\n                    let newMaterial = {...props.material};\r\n                    newMaterial.black.push(data[targetLoc].charAt(1));\r\n                    newMaterial.white.push(props.promotionPiece);\r\n                    props.setMaterial(newMaterial);\r\n                }\r\n\r\n                delete myPieces[getPieceTypeByLetter(pieceSelected.charAt(1))][selectedPieceLoc];\r\n                myPieces[getPieceTypeByLetter(props.promotionPiece)][targetLoc] = [];\r\n\r\n                delete theirPieces[getPieceTypeByLetter(targetPiece.charAt(1))][targetLoc];\r\n            }\r\n\r\n            props.setPromotion(\"disabled\");\r\n            props.setPromotionPiece(\"\");\r\n\r\n            let newSquareTypes = {...currentSquareTypes};\r\n\r\n            newSquareTypes[selectedPieceLoc] = newSquareTypes[selectedPieceLoc].substring(0, newSquareTypes[selectedPieceLoc].indexOf(\"-highlighted\"));\r\n            setSquareTypes(newSquareTypes);\r\n\r\n            setData(newData);\r\n\r\n            let newMoveHistory = getNewMoveHistory(data, targetLoc, myPieces, player, props.moveHistory);\r\n\r\n            updateLegalMoves(newData, newMoveHistory);\r\n\r\n            if(player == \"white\"){\r\n                myPieces = whitePieces;\r\n                theirPieces = blackPieces;\r\n                nextPlayer = \"black\";\r\n            }\r\n            else {\r\n                myPieces = blackPieces;\r\n                theirPieces = whitePieces;\r\n                nextPlayer = \"white\";\r\n            }\r\n\r\n            updateMoveHistory(newMoveHistory, props.setMoveHistory, getMoveSuffix(myPieces, theirPieces, newPiece));\r\n            \r\n            setPlayer(nextPlayer);\r\n\r\n            pieceSelected = \"\";\r\n            selectedPieceLoc = \"\";\r\n        }\r\n    }, [props.promotionPiece]);\r\n\r\n    \r\n    for(let i = 0; i < 8; i++){\r\n        row = [];\r\n        letter = \"a\";\r\n        \r\n        for(let j = 0; j < 8; j++){\r\n            \r\n\r\n            pieceName = data[letter+(8-i)];\r\n\r\n            row.push(<Square squareTypes = {currentSquareTypes} squareLoc = {letter+(8-i)} backgroundImage = {pieceName} onClickFunction={onClick} onClickParameters={[pieceName, player, setPlayer, letter+(8-i), currentSquareTypes, setSquareTypes, data, setData, props.promotion, props.setPromotion, props.setPromotionColour, props.moveHistory, props.setMoveHistory, props.material, props.setMaterial]} key = {letter+(8-i)}/>);\r\n            letter = nextChar(letter);\r\n        }\r\n        \r\n        board.push(<div key={8-i} className=\"board-row\">{row}</div>);\r\n\r\n        \r\n    }\r\n\r\n    return (\r\n        <div className = \"board\">\r\n            {board}\r\n        </div>\r\n      );\r\n};\r\n\r\nexport default Board;","import React from 'react';\r\n\r\nconst Promotion = (props) => {\r\n    return (\r\n        <div>\r\n            <button className={`square light-square ${props.promotionColour}q promotion ` + props.promotion} onClick={() => {\r\n                props.setPromotionPiece(\"q\");\r\n                props.setPromotion(\"disabled\");\r\n            }}></button>\r\n            <button className={`square light-square ${props.promotionColour}r promotion ` + props.promotion} onClick={() => {\r\n                props.setPromotionPiece(\"r\");\r\n                props.setPromotion(\"disabled\");\r\n            }}></button>\r\n            <button className={`square light-square ${props.promotionColour}n promotion ` + props.promotion} onClick={() => {\r\n                props.setPromotionPiece(\"n\");\r\n                props.setPromotion(\"disabled\");\r\n            }}></button>\r\n            <button className={`square light-square ${props.promotionColour}b promotion ` + props.promotion} onClick={() => {\r\n                props.setPromotionPiece(\"b\");\r\n                props.setPromotion(\"disabled\");\r\n            }}></button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Promotion;","import React, {useEffect} from 'react';\r\n\r\nconst MoveHistory = (props) => {\r\n    useEffect(() => {\r\n        let newStr = \"\";\r\n        if(props.moveHistory.length > 0){\r\n            let i = props.moveHistory.length-1;\r\n            if(i % 2 == 0){\r\n                newStr = `${i/2 + 1}.${props.moveHistory[i].name}`;\r\n            }\r\n            else {\r\n                newStr = ` ${props.moveHistory[i].name}</br>`;\r\n            }\r\n        }\r\n        \r\n        document.getElementById(\"move-history\").innerHTML += newStr;\r\n        document.getElementById(\"move-history-wrapper\").scrollTop = document.getElementById(\"move-history-wrapper\").scrollHeight;\r\n    }, [props.moveHistory])\r\n    \r\n    return (\r\n        <div className=\"auto-scroll moveHistory\" id=\"move-history-wrapper\"><p id=\"move-history\"></p></div>\r\n    );\r\n};\r\n\r\nexport default MoveHistory;","import React, {useState, useEffect} from 'react';\r\n\r\nconst Material = (props) => {\r\n\r\n    let [netMaterial, setNetMaterial] = useState({white: \" \", black: \" \"});\r\n    let [icons, setIcons] = useState({white: [], black: []});\r\n    \r\n    useEffect(() => {\r\n        let material = {white: {\"p\": 0, \"n\": 0, \"b\": 0, \"r\": 0, \"q\": 0}, black: {\"p\": 0, \"n\": 0, \"b\": 0, \"r\": 0, \"q\": 0}};\r\n        for(let piece of props.material.white){\r\n            material.white[piece]++;\r\n        }\r\n        for(let piece of props.material.black){\r\n            material.black[piece]++;\r\n        }\r\n        console.log(\"white:\" + JSON.stringify(material.white));\r\n        console.log(\"black:\" + JSON.stringify(material.black));\r\n\r\n        let whiteTotalMaterial = material.white[\"p\"] + material.white[\"n\"]*3 + material.white[\"b\"]*3 + material.white[\"r\"]*5 + material.white[\"q\"]*9;\r\n        let blackTotalMaterial = material.black[\"p\"] + material.black[\"n\"]*3 + material.black[\"b\"]*3 + material.black[\"r\"]*5 + material.black[\"q\"]*9;\r\n\r\n        if(whiteTotalMaterial > blackTotalMaterial){\r\n            setNetMaterial({white: `+${whiteTotalMaterial - blackTotalMaterial}`, black: \" \"});\r\n        }\r\n        else if(blackTotalMaterial > whiteTotalMaterial){\r\n            setNetMaterial({white: \" \", black: `+${blackTotalMaterial - whiteTotalMaterial}`});\r\n        }\r\n        else {\r\n            setNetMaterial({white: \" \", black: \" \"});\r\n        }\r\n\r\n        let newIcons = {white: [], black: []};\r\n        for(let pieceType in material.white){\r\n            if(material.white[pieceType] > material.black[pieceType]){\r\n                for(let i = 0; i < material.white[pieceType] - material.black[pieceType]; i++){\r\n                    newIcons.white.push(<div className={\"icon w\" + pieceType} key={pieceType+i}></div>);\r\n                }\r\n            }\r\n            else if(material.black[pieceType] > material.white[pieceType]){\r\n                for(let i = 0; i < material.black[pieceType] - material.white[pieceType]; i++){\r\n                    newIcons.black.push(<div className={\"icon w\" + pieceType} key={pieceType+i}></div>);\r\n                }\r\n            }\r\n        }\r\n        setIcons(newIcons);\r\n    }, [props.material])\r\n    \r\n    return (\r\n        <div className=\"material\">\r\n            <div><div className=\"icon-container\">{icons.black}</div> <div className = \"material-text\">{netMaterial.black}</div></div>\r\n            <div><div className=\"icon-container\">{icons.white}</div> <div className = \"material-text\">{netMaterial.white}</div></div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Material;","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport Board from './components/Board.js';\r\nimport Promotion from './components/Promotion.js';\r\nimport MoveHistory from './components/MoveHistory.js';\r\nimport Material from './components/Material.js';\r\n\r\nfunction App() {\r\n\r\n  let [promotion, setPromotion] = useState(\"disabled\");\r\n  let [promotionColour, setPromotionColour] = useState(\"w\");\r\n  let [promotionPiece, setPromotionPiece] = useState(\"\");\r\n\r\n  let [moveHistory, setMoveHistory] = useState([]);\r\n  let [material, setMaterial] = useState({white: [], black: []});\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <MoveHistory moveHistory={moveHistory} />\r\n      <Board promotion={promotion} setPromotion={setPromotion} promotionPiece = {promotionPiece} setPromotionPiece = {setPromotionPiece} promotionColour = {promotionColour} setPromotionColour = {setPromotionColour} moveHistory = {moveHistory} setMoveHistory = {setMoveHistory} material = {material} setMaterial = {setMaterial}/>\r\n      <Promotion promotion={promotion} setPromotion = {setPromotion} promotionPiece = {promotionPiece} setPromotionPiece = {setPromotionPiece} promotionColour = {promotionColour} setPromotionColour = {setPromotionColour}/>\r\n      <Material material = {material} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}