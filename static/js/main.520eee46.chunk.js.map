{"version":3,"sources":["components/Sqaure.js","sound/public_sound_standard_Move.mp3","sound/public_sound_standard_Capture.mp3","components/Board.js","components/Promotion.js","components/MoveHistory.js","components/Material.js","components/GamemodeSelector.js","App.js","reportWebVitals.js","index.js"],"names":["Square","props","className","squareTypes","squareLoc","backgroundImage","onClick","onClickFunction","onClickParameters","pieceSelected","selectedPieceLoc","isCapture","targetLoc","targetPiece","whiteCastlingRights","blackCastlingRights","HUMAN_PLAYER","AI_PLAYER","nextChar","c","String","fromCharCode","charCodeAt","prevChar","sound","src","this","document","createElement","setAttribute","style","display","source","type","appendChild","body","play","stop","pause","move","moveSound","capture","captureSound","whitePieces","pawns","knights","bishops","rooks","queens","king","blackPieces","getPieceTypeByLetter","letter","pieceType","console","log","getLetterByPieceType","capturePiece","theirPieces","capturedPieceLoc","theirNewPieceType","piece","theirNewPieces","myKingInCheck","myPieces","myKingLoc","Object","keys","includes","iAmCheckmated","length","calculateLegalMoves","myColour","data","moveHistory","theirColour","checkForCheck","result","JSON","parse","stringify","legalMoves","inCheckAfterMove","currLoc","proposedLoc","theirProposedPieces","myNewPieces","newLocs","loc","proposedData","charAt","pawn","push","parseInt","squareUpAndLeft","squareUpAndRight","lastMove","initialPos","destination","squareDownAndLeft","squareDownAndRight","rook","obstructions","x","squareUpXsteps","squareDownXsteps","leftChar","square","rightChar","bishop","knight","queen","updateLegalMoves","getNewMoveHistory","startingPos","player","newMoveHistory","moveName","generateMoveName","name","getMoveSuffix","promotionPiece","suffix","toUpperCase","updateMoveHistory","setMoveHistory","setPlayer","pieceLoc","currentSquareTypes","setSquareTypes","setData","promotion","setPromotion","setPromotionColour","material","setMaterial","gamemode","nextPlayer","updatePieces","newSquareTypes","deselectSelectedPiece","substring","indexOf","selectNewPiece","checkForPromotion","kingLoc","newData","squaresUp","theirPawnLoc","newMaterial","white","black","Board","row","squareType","pieceName","board","useState","firstSquareLight","i","lightSquare","j","a1","b1","c1","d1","e1","f1","g1","h1","a2","b2","c2","d2","e2","f2","g2","h2","a3","b3","c3","d3","e3","f3","g3","h3","a4","b4","c4","d4","e4","f4","g4","h4","a5","b5","c5","d5","e5","f5","g5","h5","a6","b6","c6","d6","e6","f6","g6","h6","a7","b7","c7","d7","e7","f7","g7","h7","a8","b8","c8","d8","e8","f8","g8","h8","useEffect","newPiece","setPromotionPiece","AiPieces","possibleMoves","currPieceLoc","dest","randomMove","Math","floor","random","Promotion","promotionColour","MoveHistory","newStr","getElementById","innerHTML","scrollTop","scrollHeight","id","Material","netMaterial","setNetMaterial","icons","setIcons","whiteTotalMaterial","blackTotalMaterial","newIcons","GamemodeSelector","setGamemode","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.520eee46.chunk.js","sourcesContent":["import React from 'react';\n\nconst Square = (props) => {\n    return (\n        <button className={\"square \" + props.squareTypes[props.squareLoc] + \" \" + props.backgroundImage} onClick={() => {props.onClickFunction(props.onClickParameters)}}></button>\n    );\n};\n\nexport default Square;","export default __webpack_public_path__ + \"static/media/public_sound_standard_Move.e26d185c.mp3\";","export default __webpack_public_path__ + \"static/media/public_sound_standard_Capture.3871c59a.mp3\";","import React, {useState, useEffect} from 'react';\nimport Square from './Sqaure';\nimport moveSound from '../sound/public_sound_standard_Move.mp3';\nimport captureSound from '../sound/public_sound_standard_Capture.mp3';\n\nlet pieceSelected = \"\";\nlet selectedPieceLoc = \"\";\nlet isCapture = false;\nlet targetLoc = \"\";\nlet targetPiece = \"\";\n// short, long castling rights\nlet whiteCastlingRights = [true, true];\nlet blackCastlingRights = [true, true];\nlet HUMAN_PLAYER = \"white\", AI_PLAYER = \"black\", MAX_DEPTH = 2;\n\nfunction nextChar(c) {\n    return String.fromCharCode(c.charCodeAt(0) + 1);\n}\n\nfunction prevChar(c) {\n    return String.fromCharCode(c.charCodeAt(0) - 1);\n}\n\nfunction sound(src) {\n    this.sound = document.createElement(\"audio\");\n    // this.sound.src = src;\n    this.sound.setAttribute(\"preload\", \"auto\");\n    this.sound.setAttribute(\"controls\", \"none\");\n    this.sound.style.display = \"none\";\n\n    this.source = document.createElement(\"source\");\n    this.source.src = src;\n    this.source.type = \"audio/mpeg\";\n    this.sound.appendChild(this.source);\n\n    document.body.appendChild(this.sound);\n    this.play = function(){\n      this.sound.play();\n    }\n    this.stop = function(){\n      this.sound.pause();\n    }\n}\n\nlet move = new sound(moveSound);\nlet capture = new sound(captureSound);\n  \n// structure of pieces objects\n    // {piece: {\"location\": [legal moves], ...}}\nlet whitePieces = {\n    pawns: {\"a2\":[], \"b2\":[], \"c2\":[], \"d2\":[], \"e2\":[], \"f2\":[], \"g2\":[], \"h2\":[]},\n    knights: {\"b1\":[], \"g1\":[]},\n    bishops: {\"c1\":[], \"f1\":[]},\n    rooks: {\"a1\":[], \"h1\":[]},\n    queens: {\"d1\":[]},\n    king: {\"e1\":[]}\n};\n\nlet blackPieces = {\n    pawns: {\"a7\":[], \"b7\":[], \"c7\":[], \"d7\":[], \"e7\":[], \"f7\":[], \"g7\":[], \"h7\":[]},\n    knights: {\"b8\":[], \"g8\":[]},\n    bishops: {\"c8\":[], \"f8\":[]},\n    rooks: {\"a8\":[], \"h8\":[]},\n    queens: {\"d8\":[]},\n    king: {\"e8\":[]}\n};\n\nconst getPieceTypeByLetter = (letter) => {\n    let pieceType;\n    switch(letter){\n        case \"p\": \n            pieceType = \"pawns\";\n            break;\n        case \"n\":\n            pieceType = \"knights\";\n            break;\n        case \"b\":\n            pieceType = \"bishops\";\n            break;\n        case \"r\":\n            pieceType = \"rooks\";\n            break;\n        case \"q\":\n            pieceType = \"queens\";\n            break;\n        case \"k\":\n            pieceType = \"king\";\n            break;\n        default:\n            console.log(\"error: invalid letter\");\n            break;\n    }\n    return pieceType;\n}\n\nconst getLetterByPieceType = (pieceType) => {\n    let letter;\n    switch(pieceType){\n        case \"pawns\": \n        letter = \"p\";\n            break;\n        case \"knights\":\n            letter = \"n\";\n            break;\n        case \"bishops\":\n            letter = \"b\";\n            break;\n        case \"rooks\":\n            letter = \"r\";\n            break;\n        case \"queens\":\n            letter = \"q\";\n            break;\n        case \"king\":\n            letter = \"k\";\n            break;\n        default:\n            console.log(\"error: invalid piece type\");\n            break;\n    }\n    return letter;\n}\n\nconst capturePiece = (theirPieces, pieceType, capturedPieceLoc) => {\n    let theirNewPieceType = {};\n    for(let piece in theirPieces[pieceType]){\n        if(piece != capturedPieceLoc){\n            theirNewPieceType[piece] = theirPieces[pieceType].piece;\n        }\n    }\n    let theirNewPieces = {... theirPieces};\n    theirNewPieces[pieceType] = theirNewPieceType;\n    return theirNewPieces;\n}\n\nconst myKingInCheck = (myPieces, theirPieces) => {\n    let myKingLoc = Object.keys(myPieces.king)[0];\n\n        for(let pieceType in theirPieces){\n            for(let piece in theirPieces[pieceType]){\n                if(theirPieces[pieceType][piece].includes(myKingLoc)){\n\n                    return true;\n                }\n            }\n        }\n        return false;\n}\n\nconst iAmCheckmated = (myPieces, theirPieces) => {\n    if(myKingInCheck(myPieces, theirPieces)){\n        for(let pieceType in myPieces){\n            for(let piece in myPieces[pieceType]){\n                if(myPieces[pieceType][piece].length > 0){\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }\n\n    return false;\n}\n\nconst calculateLegalMoves = (myPieces, theirPieces, myColour, data, moveHistory, checkForCheck = true) => {\n    \n    let result = JSON.parse(JSON.stringify(myPieces));\n\n    let theirColour;\n\n    if(myColour == \"white\"){\n        theirColour = \"black\";\n    }\n    else{\n        theirColour = \"white\";\n    }\n\n    /* the below function takes in a piece you want to move and it's proposed destination, and checks if the move results in the\n       player's king being in check */\n\n    const inCheckAfterMove = (pieceType, currLoc, proposedLoc, theirProposedPieces) => {\n        if(!checkForCheck) return false;\n\n        let myNewPieces = {...myPieces};\n        let newLocs = {};\n        for(let loc in myPieces[pieceType]){\n            if(loc != currLoc){\n                newLocs[loc] = myPieces[pieceType][loc]; \n            }\n            else {\n                newLocs[proposedLoc] = [];\n            }\n        }\n\n        myNewPieces[pieceType] = newLocs;\n        let proposedData = {...data};\n        proposedData[currLoc] = \"\";\n        proposedData[proposedLoc] = myColour.charAt(0) + getLetterByPieceType(pieceType);\n        let theirNewPieces = calculateLegalMoves(theirProposedPieces, myNewPieces, theirColour, proposedData, moveHistory, false);\n        return myKingInCheck(myNewPieces, theirNewPieces);\n\n    }    \n\n    // clean result\n\n    // for(let pawn in result.pawns){\n    //     result.pawns[pawn] = [];\n    // }\n\n    // for(let knight in result.knights){\n    //     result.knights[knight] = [];\n    // }\n\n    // for(let bishop in result.bishops){\n    //     result.bishops[bishop] = [];\n    // }\n\n    // for(let rook in result.rooks){\n    //     result.rooks[rook] = [];\n    // }\n    // for(let queen in result.queens){\n    //     result.queens[queen] = [];\n    // }\n    // for(let myKing in result.king){\n    //     result.king[myKing] = [];\n    // }\n\n\n    let legalMoves;\n\n    /*############################################  PAWNS  ##########################################################*/ \n\n\n    for(let pawn in myPieces.pawns){\n        legalMoves = [];\n        if(myColour == \"white\"){\n\n            // Pawn at starting position (can move 2 squares fwd)\n            if(pawn.charAt(1) == \"2\" && data[pawn.charAt(0) + \"3\" ] == \"\" && data[pawn.charAt(0) + \"4\" ] == \"\" && !inCheckAfterMove(\"pawns\", pawn, pawn.charAt(0) + \"4\", theirPieces)){\n                legalMoves.push(pawn.charAt(0)+ \"4\");\n            }\n\n            // Fwd one move\n            if(data[pawn.charAt(0) + (parseInt(pawn.charAt(1)) + 1) ] == \"\" && !inCheckAfterMove(\"pawns\", pawn, pawn.charAt(0)+ (parseInt(pawn.charAt(1)) + 1), theirPieces)){\n                legalMoves.push(pawn.charAt(0)+ (parseInt(pawn.charAt(1)) + 1));\n            }\n            \n            // Capture to the left\n            let squareUpAndLeft = prevChar(pawn.charAt(0)) + (parseInt(pawn.charAt(1)) + 1);\n            if(pawn.charAt(0) != \"a\" && data[squareUpAndLeft].charAt(0) == \"b\") {\n\n                let theirNewPieces = capturePiece(theirPieces, getPieceTypeByLetter(data[squareUpAndLeft].charAt(1)), squareUpAndLeft);\n\n                if(!inCheckAfterMove(\"pawns\", pawn, squareUpAndLeft, theirNewPieces)){\n                    legalMoves.push(squareUpAndLeft);\n                }\n            }\n\n            // Capture to the right\n            let squareUpAndRight = nextChar(pawn.charAt(0)) + (parseInt(pawn.charAt(1)) + 1);\n            if(pawn.charAt(0) != \"h\" && data[squareUpAndRight].charAt(0) == \"b\") {\n\n                let theirNewPieces = capturePiece(theirPieces, getPieceTypeByLetter(data[squareUpAndRight].charAt(1)), squareUpAndRight);\n\n                if(!inCheckAfterMove(\"pawns\", pawn, squareUpAndRight, theirNewPieces)){\n                    legalMoves.push(squareUpAndRight);\n                }\n            }\n\n            // En Passant\n            if(pawn.charAt(1) == \"5\" && moveHistory.length > 0){\n                let lastMove = moveHistory[moveHistory.length-1];\n                if(lastMove.piece == \"bp\" && lastMove.initialPos.charAt(1) == \"7\" && lastMove.destination.charAt(1) == \"5\"){\n                        if(prevChar(pawn.charAt(0)) == lastMove.destination.charAt(0)){\n                            legalMoves.push(\"<-x\");\n                        }\n                        else if(nextChar(pawn.charAt(0)) == lastMove.destination.charAt(0)){\n                            legalMoves.push(\"x->\");\n                        }\n                    }  \n            } \n        }\n        else{\n            // Pawn at starting position (can move 2 squares fwd)\n            if(pawn.charAt(1) == \"7\" && data[pawn.charAt(0) + \"6\" ] == \"\" && data[pawn.charAt(0) + \"5\" ] == \"\" && !inCheckAfterMove(\"pawns\", pawn, pawn.charAt(0) + \"5\", theirPieces)){\n                legalMoves.push(pawn.charAt(0) + \"5\");\n            }\n\n            // Fwd one move\n            if(data[pawn.charAt(0) + (parseInt(pawn.charAt(1)) - 1) ] == \"\" && !inCheckAfterMove(\"pawns\", pawn, pawn.charAt(0)+ (parseInt(pawn.charAt(1)) - 1), theirPieces)){\n                legalMoves.push(pawn.charAt(0)+ (parseInt(pawn.charAt(1)) - 1));\n            }\n\n            // Capture to the left\n            let squareDownAndLeft = prevChar(pawn.charAt(0)) + (parseInt(pawn.charAt(1)) - 1);\n            if(pawn.charAt(0) != \"a\" && data[squareDownAndLeft].charAt(0) == \"w\") {\n\n                let theirNewPieces = capturePiece(theirPieces, getPieceTypeByLetter(data[squareDownAndLeft].charAt(1)), squareDownAndLeft);\n\n                if(!inCheckAfterMove(\"pawns\", pawn, squareDownAndLeft, theirNewPieces)){\n                    legalMoves.push(squareDownAndLeft);\n                }\n            }\n\n            // Capture to the right\n            let squareDownAndRight = nextChar(pawn.charAt(0)) + (parseInt(pawn.charAt(1)) - 1);\n            if(pawn.charAt(0) != \"h\" && data[squareDownAndRight].charAt(0) == \"w\") {\n\n                let theirNewPieces = capturePiece(theirPieces, getPieceTypeByLetter(data[squareDownAndRight].charAt(1)), squareDownAndRight);\n\n                if(!inCheckAfterMove(\"pawns\", pawn, squareDownAndRight, theirNewPieces)){\n                    legalMoves.push(squareDownAndRight);\n                }\n            }\n\n            // En Passant\n            if(pawn.charAt(1) == \"4\" && moveHistory.length > 0){\n                let lastMove = moveHistory[moveHistory.length-1];\n                if(lastMove.piece == \"wp\" && lastMove.initialPos.charAt(1) == \"2\" && lastMove.destination.charAt(1) == \"4\"){\n                        if(prevChar(pawn.charAt(0)) == lastMove.destination.charAt(0)){\n                            legalMoves.push(\"<-x\");\n                        }\n                        else if(nextChar(pawn.charAt(0)) == lastMove.destination.charAt(0)){\n                            legalMoves.push(\"x->\");\n                        }\n                    }  \n            } \n            \n        }\n        result.pawns[pawn] = [...legalMoves];\n    }\n\n    /* #############################################     ROOKS    ################################################################ */\n    for(let rook in myPieces.rooks){\n        legalMoves = [];\n\n        // Moves up\n        let obstructions = false;\n        let x = 1;\n        while(!obstructions && (parseInt(rook.charAt(1)) + x) <= 8){\n            let squareUpXsteps = rook.charAt(0) + (parseInt(rook.charAt(1)) + x);\n            \n\n            if(data[squareUpXsteps] == \"\" && !inCheckAfterMove(\"rooks\", rook, squareUpXsteps, theirPieces)){\n                legalMoves.push(squareUpXsteps);\n            }\n            else if(data[squareUpXsteps].charAt(0) == myColour.charAt(0)){\n                obstructions = true;\n            }\n            else if(data[squareUpXsteps] != \"\"){\n                let theirNewPieces = capturePiece(theirPieces, getPieceTypeByLetter(data[squareUpXsteps].charAt(1)), squareUpXsteps);\n                if(!inCheckAfterMove(\"rooks\", rook, squareUpXsteps, theirNewPieces)){\n                    legalMoves.push(squareUpXsteps);\n                }\n                obstructions = true;\n            }\n            x++;\n        }\n\n        // Moves down\n\n        obstructions = false;\n        x = -1;\n        while(!obstructions && (parseInt(rook.charAt(1)) + x) >= 1){\n            let squareDownXsteps = rook.charAt(0) + (parseInt(rook.charAt(1)) + x);\n\n            if(data[squareDownXsteps] == \"\" && !inCheckAfterMove(\"rooks\", rook, squareDownXsteps, theirPieces)){\n                legalMoves.push(squareDownXsteps);\n            }\n            else if(data[squareDownXsteps].charAt(0) == myColour.charAt(0)){\n                obstructions = true;\n            }\n            else if(data[squareDownXsteps] != \"\"){\n                let theirNewPieces = capturePiece(theirPieces, getPieceTypeByLetter(data[squareDownXsteps].charAt(1)), squareDownXsteps);\n                if(!inCheckAfterMove(\"rooks\", rook, squareDownXsteps, theirNewPieces)){\n                    legalMoves.push(squareDownXsteps);\n                }\n                obstructions = true;\n            }\n\n            x--;\n        }\n\n        // Moves Left\n        obstructions = false;\n        let leftChar = prevChar(rook.charAt(0));\n        while(!obstructions && rook.charAt(0) != \"a\"){\n            let square = leftChar + parseInt(rook.charAt(1));\n            if(data[square] == \"\" && !inCheckAfterMove(\"rooks\", rook, square, theirPieces)){\n                legalMoves.push(square);\n            }\n            else if(data[square].charAt(0) == myColour.charAt(0)){\n                obstructions = true;\n            }\n            else if(data[square] != \"\"){\n                let theirNewPieces = capturePiece(theirPieces, getPieceTypeByLetter(data[square].charAt(1)), square);\n                if(!inCheckAfterMove(\"rooks\", rook, square, theirNewPieces)){\n                    legalMoves.push(square);\n                }\n                obstructions = true;\n            }\n\n            if(leftChar == \"a\"){\n                obstructions = true;\n            }\n            else{\n                leftChar = prevChar(leftChar);\n            }\n        }\n\n        // Moves Right\n        obstructions = false;\n        let rightChar = nextChar(rook.charAt(0));\n        while(!obstructions && rook.charAt(0) != \"h\"){\n            let square = rightChar + parseInt(rook.charAt(1));\n            if(data[square] == \"\" && !inCheckAfterMove(\"rooks\", rook, square, theirPieces)){\n                legalMoves.push(square);\n            }\n            else if(data[square].charAt(0) == myColour.charAt(0)){\n                obstructions = true;\n            }\n            else if(data[square] != \"\"){\n                let theirNewPieces = capturePiece(theirPieces, getPieceTypeByLetter(data[square].charAt(1)), square);\n                if(!inCheckAfterMove(\"rooks\", rook, square, theirNewPieces)){\n                    legalMoves.push(square);\n                }\n                obstructions = true;\n            }\n\n            if(rightChar == \"h\"){\n                obstructions = true;\n            }\n            else{\n                rightChar = nextChar(rightChar);\n            }\n        }\n\n        result.rooks[rook] = [...legalMoves];\n    }\n\n    /* #############################################     BISHOPS    ################################################################ */\n\n    for(let bishop in myPieces.bishops){\n        legalMoves = [];\n\n        // Moves up and right\n        let obstructions = false;\n        let x = 1;\n        let rightChar = nextChar(bishop.charAt(0));\n\n        while(!obstructions && (parseInt(bishop.charAt(1)) + x) <= 8 && bishop.charAt(0) != \"h\"){\n            let square = rightChar + (parseInt(bishop.charAt(1)) + x);\n\n            if(data[square] == \"\" && !inCheckAfterMove(\"bishops\", bishop, square, theirPieces)){\n                legalMoves.push(square);\n            }\n            else if (data[square].charAt(0) == myColour.charAt(0)){\n                obstructions = true;\n            }\n            else if(data[square] != \"\"){\n                let theirNewPieces = capturePiece(theirPieces, getPieceTypeByLetter(data[square].charAt(1)), square);\n                if(!inCheckAfterMove(\"bishops\", bishop, square, theirNewPieces)){\n                    legalMoves.push(square);\n                }\n                obstructions = true;\n            }\n\n            if(rightChar == \"h\"){\n                obstructions = true;\n            }\n            else{\n                x++;\n                rightChar = nextChar(rightChar);\n            }\n        }\n\n        // Moves up and left\n\n        obstructions = false;\n        x = 1;\n        let leftChar = prevChar(bishop.charAt(0));\n\n        while(!obstructions && (parseInt(bishop.charAt(1)) + x) <= 8 && bishop.charAt(0) != \"a\"){\n            let square = leftChar + (parseInt(bishop.charAt(1)) + x);\n\n            if(data[square] == \"\" && !inCheckAfterMove(\"bishops\", bishop, square, theirPieces)){\n                legalMoves.push(square);\n            }\n            else if (data[square].charAt(0) == myColour.charAt(0)){\n                obstructions = true;\n            }\n            else if(data[square] != \"\"){\n                let theirNewPieces = capturePiece(theirPieces, getPieceTypeByLetter(data[square].charAt(1)), square);\n                if(!inCheckAfterMove(\"bishops\", bishop, square, theirNewPieces)){\n                    legalMoves.push(square);\n                }\n                obstructions = true;\n            }\n\n            if(leftChar == \"a\"){\n                obstructions = true;\n            }\n            else{\n                x++;\n                leftChar = prevChar(leftChar);\n            }\n        }\n\n        // Moves down and right\n        obstructions = false;\n        x = -1;\n        rightChar = nextChar(bishop.charAt(0));\n\n        while(!obstructions && (parseInt(bishop.charAt(1)) + x) >= 1 && bishop.charAt(0) != \"h\"){\n            let square = rightChar + (parseInt(bishop.charAt(1)) + x);\n\n            if(data[square] == \"\" && !inCheckAfterMove(\"bishops\", bishop, square, theirPieces)){\n                legalMoves.push(square);\n            }\n            else if (data[square].charAt(0) == myColour.charAt(0)){\n                obstructions = true;\n            }\n            else if(data[square] != \"\"){\n                let theirNewPieces = capturePiece(theirPieces, getPieceTypeByLetter(data[square].charAt(1)), square);\n                if(!inCheckAfterMove(\"bishops\", bishop, square, theirNewPieces)){\n                    legalMoves.push(square);\n                }\n                obstructions = true;\n            }\n\n            if(rightChar == \"h\"){\n                obstructions = true;\n            }\n            else{\n                x--;\n                rightChar = nextChar(rightChar);\n            }\n        }\n\n        // Moves down and left\n\n        obstructions = false;\n        x = -1;\n        leftChar = prevChar(bishop.charAt(0));\n\n        while(!obstructions && (parseInt(bishop.charAt(1)) + x) >= 1 && bishop.charAt(0) != \"a\"){\n            let square = leftChar + (parseInt(bishop.charAt(1)) + x);\n\n            if(data[square] == \"\" && !inCheckAfterMove(\"bishops\", bishop, square, theirPieces)){\n                legalMoves.push(square);\n            }\n            else if (data[square].charAt(0) == myColour.charAt(0)){\n                obstructions = true;\n            }\n            else if(data[square] != \"\"){\n                let theirNewPieces = capturePiece(theirPieces, getPieceTypeByLetter(data[square].charAt(1)), square);\n                if(!inCheckAfterMove(\"bishops\", bishop, square, theirNewPieces)){\n                    legalMoves.push(square);\n                }\n                obstructions = true;\n            }\n\n            if(leftChar == \"a\"){\n                obstructions = true;\n            }\n            else{\n                x--;\n                leftChar = prevChar(leftChar);\n            }\n        }\n        result.bishops[bishop] = [...legalMoves];\n    }\n\n    /* #############################################     KNIGHTS    ################################################################ */\n    for(let knight in myPieces.knights){\n        legalMoves = [];\n        let square;\n\n        /* \n            x x\n            x\n            N\n        */\n\n        if(parseInt(knight.charAt(1)) < 7 && knight.charAt(0) != \"h\"){\n            square = nextChar(knight.charAt(0)) + (parseInt(knight.charAt(1)) + 2);\n\n            if(data[square] == \"\" && !inCheckAfterMove(\"knights\", knight, square, theirPieces)){\n                legalMoves.push(square);\n            }\n            else if(data[square].charAt(0) != myColour.charAt(0) && data[square] != \"\"){\n                let theirNewPieces = capturePiece(theirPieces, getPieceTypeByLetter(data[square].charAt(1)), square);\n                if(!inCheckAfterMove(\"knights\", knight, square, theirNewPieces)){\n                    legalMoves.push(square);\n                }\n            }\n        }\n\n        /* \n            x x\n              x\n              N\n        */\n\n        if(parseInt(knight.charAt(1)) < 7 && knight.charAt(0) != \"a\"){\n            square = prevChar(knight.charAt(0)) + (parseInt(knight.charAt(1)) + 2);\n\n            if(data[square] == \"\" && !inCheckAfterMove(\"knights\", knight, square, theirPieces)){\n                legalMoves.push(square);\n            }\n            else if(data[square].charAt(0) != myColour.charAt(0) && data[square] != \"\"){\n                let theirNewPieces = capturePiece(theirPieces, getPieceTypeByLetter(data[square].charAt(1)), square);\n                if(!inCheckAfterMove(\"knights\", knight, square, theirNewPieces)){\n                    legalMoves.push(square);\n                }\n            }\n        }\n\n        /* \n            N\n            x\n            x x\n        */\n\n        if(parseInt(knight.charAt(1)) > 2 && knight.charAt(0) != \"h\"){\n            square = nextChar(knight.charAt(0)) + (parseInt(knight.charAt(1)) - 2);\n\n            if(data[square] == \"\" && !inCheckAfterMove(\"knights\", knight, square, theirPieces)){\n                legalMoves.push(square);\n            }\n            else if(data[square].charAt(0) != myColour.charAt(0) && data[square] != \"\"){\n                let theirNewPieces = capturePiece(theirPieces, getPieceTypeByLetter(data[square].charAt(1)), square);\n                if(!inCheckAfterMove(\"knights\", knight, square, theirNewPieces)){\n                    legalMoves.push(square);\n                }\n            }\n        }\n\n        /* \n              N\n              x\n            x x\n        */\n\n        if(parseInt(knight.charAt(1)) > 2 && knight.charAt(0) != \"a\"){\n            square = prevChar(knight.charAt(0)) + (parseInt(knight.charAt(1)) - 2);\n\n            if(data[square] == \"\" && !inCheckAfterMove(\"knights\", knight, square, theirPieces)){\n                legalMoves.push(square);\n            }\n            else if(data[square].charAt(0) != myColour.charAt(0) && data[square] != \"\"){\n                let theirNewPieces = capturePiece(theirPieces, getPieceTypeByLetter(data[square].charAt(1)), square);\n                if(!inCheckAfterMove(\"knights\", knight, square, theirNewPieces)){\n                    legalMoves.push(square);\n                }\n            }\n        }\n\n        /* \n            x x x\n            N\n        */\n\n        if(knight.charAt(1) != \"8\" && knight.charAt(0) != \"h\" && knight.charAt(0) != \"g\"){\n            square = nextChar(nextChar(knight.charAt(0))) + (parseInt(knight.charAt(1)) + 1);\n\n            if(data[square] == \"\" && !inCheckAfterMove(\"knights\", knight, square, theirPieces)){\n                legalMoves.push(square);\n            }\n            else if(data[square].charAt(0) != myColour.charAt(0) && data[square] != \"\"){\n                let theirNewPieces = capturePiece(theirPieces, getPieceTypeByLetter(data[square].charAt(1)), square);\n                if(!inCheckAfterMove(\"knights\", knight, square, theirNewPieces)){\n                    legalMoves.push(square);\n                }\n            }\n        }\n\n        /* \n            x x x\n                N\n        */\n\n        if(knight.charAt(1) != \"8\" && knight.charAt(0) != \"a\" && knight.charAt(0) != \"b\"){\n            square = prevChar(prevChar(knight.charAt(0))) + (parseInt(knight.charAt(1)) + 1);\n\n            if(data[square] == \"\" && !inCheckAfterMove(\"knights\", knight, square, theirPieces)){\n                legalMoves.push(square);\n            }\n            else if(data[square].charAt(0) != myColour.charAt(0) && data[square] != \"\"){\n                let theirNewPieces = capturePiece(theirPieces, getPieceTypeByLetter(data[square].charAt(1)), square);\n                if(!inCheckAfterMove(\"knights\", knight, square, theirNewPieces)){\n                    legalMoves.push(square);\n                }\n            }\n        }\n\n        /* \n            N\n            x x x\n        */\n\n        if(knight.charAt(1) != \"1\" && knight.charAt(0) != \"h\" && knight.charAt(0) != \"g\"){\n            square = nextChar(nextChar(knight.charAt(0))) + (parseInt(knight.charAt(1)) - 1);\n\n            if(data[square] == \"\" && !inCheckAfterMove(\"knights\", knight, square, theirPieces)){\n                legalMoves.push(square);\n            }\n            else if(data[square].charAt(0) != myColour.charAt(0) && data[square] != \"\"){\n                let theirNewPieces = capturePiece(theirPieces, getPieceTypeByLetter(data[square].charAt(1)), square);\n                if(!inCheckAfterMove(\"knights\", knight, square, theirNewPieces)){\n                    legalMoves.push(square);\n                }\n            }\n        }\n\n        /* \n                N\n            x x x\n        */\n\n        if(knight.charAt(1) != \"1\" && knight.charAt(0) != \"a\" && knight.charAt(0) != \"b\"){\n            square = prevChar(prevChar(knight.charAt(0))) + (parseInt(knight.charAt(1)) - 1);\n\n            if(data[square] == \"\" && !inCheckAfterMove(\"knights\", knight, square, theirPieces)){\n                legalMoves.push(square);\n            }\n            else if(data[square].charAt(0) != myColour.charAt(0) && data[square] != \"\"){\n                let theirNewPieces = capturePiece(theirPieces, getPieceTypeByLetter(data[square].charAt(1)), square);\n                if(!inCheckAfterMove(\"knights\", knight, square, theirNewPieces)){\n                    legalMoves.push(square);\n                }\n            }\n        }\n\n        result.knights[knight] = [...legalMoves];\n\n    }\n\n    /* #############################################     QUEENS    ################################################################ */\n    for(let queen in myPieces.queens){\n        legalMoves = [];\n\n        // Moves up\n        let obstructions = false;\n        let x = 1;\n        while(!obstructions && (parseInt(queen.charAt(1)) + x) <= 8){\n            let squareUpXsteps = queen.charAt(0) + (parseInt(queen.charAt(1)) + x);\n            \n\n            if(data[squareUpXsteps] == \"\" && !inCheckAfterMove(\"queens\", queen, squareUpXsteps, theirPieces)){\n                legalMoves.push(squareUpXsteps);\n            }\n            else if(data[squareUpXsteps].charAt(0) == myColour.charAt(0)){\n                obstructions = true;\n            }\n            else if(data[squareUpXsteps] != \"\"){\n                let theirNewPieces = capturePiece(theirPieces, getPieceTypeByLetter(data[squareUpXsteps].charAt(1)), squareUpXsteps);\n                if(!inCheckAfterMove(\"queens\", queen, squareUpXsteps, theirNewPieces)){\n                    legalMoves.push(squareUpXsteps);\n                }\n                obstructions = true;\n            }\n            x++;\n        }\n\n        // Moves down\n\n        obstructions = false;\n        x = -1;\n        while(!obstructions && (parseInt(queen.charAt(1)) + x) >= 1){\n            let squareDownXsteps = queen.charAt(0) + (parseInt(queen.charAt(1)) + x);\n\n            if(data[squareDownXsteps] == \"\" && !inCheckAfterMove(\"queens\", queen, squareDownXsteps, theirPieces)){\n                legalMoves.push(squareDownXsteps);\n            }\n            else if(data[squareDownXsteps].charAt(0) == myColour.charAt(0)){\n                obstructions = true;\n            }\n            else if(data[squareDownXsteps] != \"\"){\n                let theirNewPieces = capturePiece(theirPieces, getPieceTypeByLetter(data[squareDownXsteps].charAt(1)), squareDownXsteps);\n                if(!inCheckAfterMove(\"queens\", queen, squareDownXsteps, theirNewPieces)){\n                    legalMoves.push(squareDownXsteps);\n                }\n                obstructions = true;\n            }\n\n            x--;\n        }\n\n        // Moves Left\n        obstructions = false;\n        let leftChar = prevChar(queen.charAt(0));\n        while(!obstructions && queen.charAt(0) != \"a\"){\n            let square = leftChar + parseInt(queen.charAt(1));\n            if(data[square] == \"\" && !inCheckAfterMove(\"queens\", queen, square, theirPieces)){\n                legalMoves.push(square);\n            }\n            else if(data[square].charAt(0) == myColour.charAt(0)){\n                obstructions = true;\n            }\n            else if(data[square] != \"\"){\n                let theirNewPieces = capturePiece(theirPieces, getPieceTypeByLetter(data[square].charAt(1)), square);\n                if(!inCheckAfterMove(\"queens\", queen, square, theirNewPieces)){\n                    legalMoves.push(square);\n                }\n                obstructions = true;\n            }\n\n            if(leftChar == \"a\"){\n                obstructions = true;\n            }\n            else{\n                leftChar = prevChar(leftChar);\n            }\n        }\n\n        // Moves Right\n        obstructions = false;\n        let rightChar = nextChar(queen.charAt(0));\n        while(!obstructions && queen.charAt(0) != \"h\"){\n            let square = rightChar + parseInt(queen.charAt(1));\n            if(data[square] == \"\" && !inCheckAfterMove(\"queens\", queen, square, theirPieces)){\n                legalMoves.push(square);\n            }\n            else if(data[square].charAt(0) == myColour.charAt(0)){\n                obstructions = true;\n            }\n            else if(data[square] != \"\"){\n                let theirNewPieces = capturePiece(theirPieces, getPieceTypeByLetter(data[square].charAt(1)), square);\n                if(!inCheckAfterMove(\"queens\", queen, square, theirNewPieces)){\n                    legalMoves.push(square);\n                }\n                obstructions = true;\n            }\n\n            if(rightChar == \"h\"){\n                obstructions = true;\n            }\n            else{\n                rightChar = nextChar(rightChar);\n            }\n        }\n\n        // Moves up and right\n        obstructions = false;\n        x = 1;\n        rightChar = nextChar(queen.charAt(0));\n\n        while(!obstructions && (parseInt(queen.charAt(1)) + x) <= 8 && queen.charAt(0) != \"h\"){\n            let square = rightChar + (parseInt(queen.charAt(1)) + x);\n\n            if(data[square] == \"\" && !inCheckAfterMove(\"queens\", queen, square, theirPieces)){\n                legalMoves.push(square);\n            }\n            else if (data[square].charAt(0) == myColour.charAt(0)){\n                obstructions = true;\n            }\n            else if(data[square] != \"\"){\n                let theirNewPieces = capturePiece(theirPieces, getPieceTypeByLetter(data[square].charAt(1)), square);\n                if(!inCheckAfterMove(\"queens\", queen, square, theirNewPieces)){\n                    legalMoves.push(square);\n                }\n                obstructions = true;\n            }\n\n            if(rightChar == \"h\"){\n                obstructions = true;\n            }\n            else{\n                x++;\n                rightChar = nextChar(rightChar);\n            }\n        }\n\n        // Moves up and left\n\n        obstructions = false;\n        x = 1;\n        leftChar = prevChar(queen.charAt(0));\n\n        while(!obstructions && (parseInt(queen.charAt(1)) + x) <= 8 && queen.charAt(0) != \"a\"){\n            let square = leftChar + (parseInt(queen.charAt(1)) + x);\n\n            if(data[square] == \"\" && !inCheckAfterMove(\"queens\", queen, square, theirPieces)){\n                legalMoves.push(square);\n            }\n            else if (data[square].charAt(0) == myColour.charAt(0)){\n                obstructions = true;\n            }\n            else if(data[square] != \"\"){\n                let theirNewPieces = capturePiece(theirPieces, getPieceTypeByLetter(data[square].charAt(1)), square);\n                if(!inCheckAfterMove(\"queens\", queen, square, theirNewPieces)){\n                    legalMoves.push(square);\n                }\n                obstructions = true;\n            }\n\n            if(leftChar == \"a\"){\n                obstructions = true;\n            }\n            else{\n                x++;\n                leftChar = prevChar(leftChar);\n            }\n        }\n\n        // Moves down and right\n        obstructions = false;\n        x = -1;\n        rightChar = nextChar(queen.charAt(0));\n\n        while(!obstructions && (parseInt(queen.charAt(1)) + x) >= 1 && queen.charAt(0) != \"h\"){\n            let square = rightChar + (parseInt(queen.charAt(1)) + x);\n\n            if(data[square] == \"\" && !inCheckAfterMove(\"queens\", queen, square, theirPieces)){\n                legalMoves.push(square);\n            }\n            else if (data[square].charAt(0) == myColour.charAt(0)){\n                obstructions = true;\n            }\n            else if(data[square] != \"\"){\n                let theirNewPieces = capturePiece(theirPieces, getPieceTypeByLetter(data[square].charAt(1)), square);\n                if(!inCheckAfterMove(\"queens\", queen, square, theirNewPieces)){\n                    legalMoves.push(square);\n                }\n                obstructions = true;\n            }\n\n            if(rightChar == \"h\"){\n                obstructions = true;\n            }\n            else{\n                x--;\n                rightChar = nextChar(rightChar);\n            }\n        }\n\n        // Moves down and left\n\n        obstructions = false;\n        x = -1;\n        leftChar = prevChar(queen.charAt(0));\n\n        while(!obstructions && (parseInt(queen.charAt(1)) + x) >= 1 && queen.charAt(0) != \"a\"){\n            let square = leftChar + (parseInt(queen.charAt(1)) + x);\n\n            if(data[square] == \"\" && !inCheckAfterMove(\"queens\", queen, square, theirPieces)){\n                legalMoves.push(square);\n            }\n            else if (data[square].charAt(0) == myColour.charAt(0)){\n                obstructions = true;\n            }\n            else if(data[square] != \"\"){\n                let theirNewPieces = capturePiece(theirPieces, getPieceTypeByLetter(data[square].charAt(1)), square);\n                if(!inCheckAfterMove(\"queens\", queen, square, theirNewPieces)){\n                    legalMoves.push(square);\n                }\n                obstructions = true;\n            }\n\n            if(leftChar == \"a\"){\n                obstructions = true;\n            }\n            else{\n                x--;\n                leftChar = prevChar(leftChar);\n            }\n        }\n\n        result.queens[queen] = [...legalMoves];\n    }\n\n    /* #############################################     KING    ################################################################ */\n    if(Object.keys(myPieces.king).length == 0) return result;\n\n    let king = Object.keys(myPieces.king)[0];\n\n    legalMoves = [];\n\n    // Up\n    let square = king.charAt(0) + (parseInt(king.charAt(1)) + 1);\n\n    if(parseInt(king.charAt(1)) < 8 && data[square] == \"\" && !inCheckAfterMove(\"king\", king, square, theirPieces)) {\n        legalMoves.push(square)\n    }\n    else if(parseInt(king.charAt(1)) < 8 && data[square].charAt(0) != myColour.charAt(0) && data[square] != \"\"){\n        let theirNewPieces = capturePiece(theirPieces, getPieceTypeByLetter(data[square].charAt(1)), square);\n        if(!inCheckAfterMove(\"king\", king, square, theirNewPieces)){\n            legalMoves.push(square);\n        }\n    }\n\n    // Down\n\n    square = king.charAt(0) + (parseInt(king.charAt(1)) - 1);\n\n    if(parseInt(king.charAt(1)) > 1 && data[square] == \"\" && !inCheckAfterMove(\"king\", king, square, theirPieces)) {\n        legalMoves.push(square)\n    }\n    else if(parseInt(king.charAt(1)) > 1 && data[square].charAt(0) != myColour.charAt(0) && data[square] != \"\"){\n        let theirNewPieces = capturePiece(theirPieces, getPieceTypeByLetter(data[square].charAt(1)), square);\n        if(!inCheckAfterMove(\"king\", king, square, theirNewPieces)){\n            legalMoves.push(square);\n        }\n    }\n\n    // Left\n\n    square = prevChar(king.charAt(0)) + king.charAt(1);\n\n    if(king.charAt(0) != \"a\" && data[square] == \"\" && !inCheckAfterMove(\"king\", king, square, theirPieces)) {\n        legalMoves.push(square)\n    }\n    else if(king.charAt(0) != \"a\" && data[square].charAt(0) != myColour.charAt(0) && data[square] != \"\"){\n        let theirNewPieces = capturePiece(theirPieces, getPieceTypeByLetter(data[square].charAt(1)), square);\n        if(!inCheckAfterMove(\"king\", king, square, theirNewPieces)){\n            legalMoves.push(square);\n        }\n    }\n\n    // Right\n\n    square = nextChar(king.charAt(0)) + king.charAt(1);\n\n    if(king.charAt(0) != \"h\" && data[square] == \"\" && !inCheckAfterMove(\"king\", king, square, theirPieces)) {\n        legalMoves.push(square)\n    }\n    else if(king.charAt(0) != \"h\" && data[square].charAt(0) != myColour.charAt(0) && data[square] != \"\"){\n        let theirNewPieces = capturePiece(theirPieces, getPieceTypeByLetter(data[square].charAt(1)), square);\n        if(!inCheckAfterMove(\"king\", king, square, theirNewPieces)){\n            legalMoves.push(square);\n        }\n    }\n\n    // Up and Right\n\n    square = nextChar(king.charAt(0)) + (parseInt(king.charAt(1)) + 1);\n\n    if(parseInt(king.charAt(1)) < 8 && king.charAt(0) != \"h\" && data[square] == \"\" && !inCheckAfterMove(\"king\", king, square, theirPieces)) {\n        legalMoves.push(square)\n    }\n    else if(parseInt(king.charAt(1)) < 8 && king.charAt(0) != \"h\" && data[square].charAt(0) != myColour.charAt(0) && data[square] != \"\"){\n        let theirNewPieces = capturePiece(theirPieces, getPieceTypeByLetter(data[square].charAt(1)), square);\n        if(!inCheckAfterMove(\"king\", king, square, theirNewPieces)){\n            legalMoves.push(square);\n        }\n    }\n\n    // Up and Left\n\n    square = prevChar(king.charAt(0)) + (parseInt(king.charAt(1)) + 1);\n\n    if(parseInt(king.charAt(1)) < 8 && king.charAt(0) != \"a\" && data[square] == \"\" && !inCheckAfterMove(\"king\", king, square, theirPieces)) {\n        legalMoves.push(square)\n    }\n    else if(parseInt(king.charAt(1)) < 8 && king.charAt(0) != \"a\" && data[square].charAt(0) != myColour.charAt(0) && data[square] != \"\"){\n        let theirNewPieces = capturePiece(theirPieces, getPieceTypeByLetter(data[square].charAt(1)), square);\n        if(!inCheckAfterMove(\"king\", king, square, theirNewPieces)){\n            legalMoves.push(square);\n        }\n    }\n\n    // Down and Right\n\n    square = nextChar(king.charAt(0)) + (parseInt(king.charAt(1)) - 1);\n\n    if(parseInt(king.charAt(1)) > 1 && king.charAt(0) != \"h\" && data[square] == \"\" && !inCheckAfterMove(\"king\", king, square, theirPieces)) {\n        legalMoves.push(square)\n    }\n    else if(parseInt(king.charAt(1)) > 1 && king.charAt(0) != \"h\" && data[square].charAt(0) != myColour.charAt(0) && data[square] != \"\"){\n        let theirNewPieces = capturePiece(theirPieces, getPieceTypeByLetter(data[square].charAt(1)), square);\n        if(!inCheckAfterMove(\"king\", king, square, theirNewPieces)){\n            legalMoves.push(square);\n        }\n    }\n\n    // Down and Left\n\n    square = prevChar(king.charAt(0)) + (parseInt(king.charAt(1)) - 1);\n\n    if(parseInt(king.charAt(1)) > 1 && king.charAt(0) != \"a\" && data[square] == \"\" && !inCheckAfterMove(\"king\", king, square, theirPieces)) {\n        legalMoves.push(square)\n    }\n    else if(parseInt(king.charAt(1)) > 1 && king.charAt(0) != \"a\" && data[square].charAt(0) != myColour.charAt(0) && data[square] != \"\"){\n        let theirNewPieces = capturePiece(theirPieces, getPieceTypeByLetter(data[square].charAt(1)), square);\n        if(!inCheckAfterMove(\"king\", king, square, theirNewPieces)){\n            legalMoves.push(square);\n        }\n    }\n\n    if(!inCheckAfterMove(\"king\", king, king, theirPieces)){\n        // White Castle short\n        if(myColour == \"white\" && whiteCastlingRights[0]){\n            if(data[\"f1\"] == \"\" && data[\"g1\"] == \"\" && !inCheckAfterMove(\"king\", king, \"f1\", theirPieces) && !inCheckAfterMove(\"king\", king, \"g1\", theirPieces)){\n                legalMoves.push(\"O-O\");\n            }\n        }\n\n        // White Castle long\n        if(myColour == \"white\" && whiteCastlingRights[1]){\n            if(data[\"d1\"] == \"\" && data[\"c1\"] == \"\" && data[\"b1\"] == \"\" && !inCheckAfterMove(\"king\", king, \"d1\", theirPieces) && !inCheckAfterMove(\"king\", king, \"c1\", theirPieces)){\n                legalMoves.push(\"O-O-O\");\n            }\n        }\n\n        // Black Castle short\n        if(myColour == \"black\" && blackCastlingRights[0]){\n            if(data[\"f8\"] == \"\" && data[\"g8\"] == \"\" && !inCheckAfterMove(\"king\", king, \"f8\", theirPieces) && !inCheckAfterMove(\"king\", king, \"g8\", theirPieces)){\n                legalMoves.push(\"O-O\");\n            }\n        }\n\n        // Black Castle long\n        if(myColour == \"black\" && blackCastlingRights[1]){\n            if(data[\"d8\"] == \"\" && data[\"c8\"] == \"\" && data[\"b8\"] == \"\" && !inCheckAfterMove(\"king\", king, \"d8\", theirPieces) && !inCheckAfterMove(\"king\", king, \"c8\", theirPieces)){\n                legalMoves.push(\"O-O-O\");\n            }\n        }\n    }\n\n    result.king[king] = [...legalMoves];\n\n    return result;\n\n}\n\n// change so that not calculating moves on each mouse click - must always update both at same time bc of castling and giving check at the same time\nconst updateLegalMoves = (data, moveHistory) => {\n    whitePieces = calculateLegalMoves(whitePieces, blackPieces, \"white\", data, moveHistory);\n    blackPieces = calculateLegalMoves(blackPieces, whitePieces, \"black\", data, moveHistory);\n}\n\nconst getNewMoveHistory = (data, startingPos, destination, myPieces, player, moveHistory) => {\n    let newMoveHistory = [...moveHistory];\n    let moveName = generateMoveName(data, startingPos, destination, myPieces, player);\n    let move;\n    if(moveName != \"O-O\" && moveName != \"O-O-O\"){\n        move = {initialPos: selectedPieceLoc, destination: destination, piece: data[startingPos], name: moveName};\n    }\n    else{\n        move = {initialPos: selectedPieceLoc, destination: moveName, piece: data[startingPos], name: moveName};\n    }\n    newMoveHistory.push(move);\n    return newMoveHistory;\n}\n\nconst getMoveSuffix = (myPieces, theirPieces, promotionPiece = \"\") => {\n    let suffix = \"\";\n\n    if(promotionPiece != \"\"){\n        suffix += \"=\" + promotionPiece.toUpperCase();\n    }\n\n    if(iAmCheckmated(theirPieces, myPieces)){\n        suffix += \"#\";\n    }\n    else if(myKingInCheck(theirPieces, myPieces)){\n        suffix += \"+\";\n    }\n\n    return suffix;\n}\n\nconst updateMoveHistory = (moveHistory, setMoveHistory, suffix) => {\n    let newMoveHistory = [...moveHistory];\n    if(newMoveHistory.length > 0){\n        newMoveHistory[newMoveHistory.length-1].name += suffix;\n        setMoveHistory(newMoveHistory);\n    }\n    \n}\n\nconst generateMoveName = (data, startingPos, destination, myPieces, player) => {\n    let theirColour;\n    \n    if(player == \"white\"){\n        theirColour = \"black\";\n    } \n    else theirColour = \"white\";\n\n    switch(data[startingPos].charAt(1)){\n        case \"p\":\n\n            if(startingPos.charAt(0) != destination.charAt(0)){\n                return `${startingPos.charAt(0)}x${destination}`;\n            }\n            \n            return destination;\n            \n        case \"n\":\n            for(let knight in myPieces.knights){\n                if(knight != startingPos && myPieces.knights[knight].includes(destination)){\n                    if(knight.charAt(0) == startingPos.charAt(0)){\n                        if(data[destination].charAt(0) == theirColour.charAt(0)){\n                            return `N${startingPos.charAt(1)}x${destination}`;\n                        }\n                        return `N${startingPos.charAt(1)}${destination}`;\n                    }\n                    if(data[destination].charAt(0) == theirColour.charAt(0)){\n                        return `N${startingPos.charAt(0)}x${destination}`;\n                    }\n                    return `N${startingPos.charAt(0)}${destination}`;\n                }\n            }\n\n            if(data[destination].charAt(0) == theirColour.charAt(0)){\n                return `Nx${destination}`;\n            }\n            \n            return `N${destination}`;\n            \n        case \"b\":\n            for(let bishop in myPieces.bishops){\n                if(bishop != startingPos && myPieces.bishops[bishop].includes(destination)){\n                    if(bishop.charAt(0) == startingPos.charAt(0)){\n                        if(data[destination].charAt(0) == theirColour.charAt(0)){\n                            return `B${startingPos.charAt(1)}x${destination}`;\n                        }\n                        return `B${startingPos.charAt(1)}${destination}`;\n                    }\n                    if(data[destination].charAt(0) == theirColour.charAt(0)){\n                        return `B${startingPos.charAt(0)}x${destination}`;\n                    }\n                    return `B${startingPos.charAt(0)}${destination}`;\n                }\n            }\n\n            if(data[destination].charAt(0) == theirColour.charAt(0)){\n                return `Bx${destination}`;\n            }\n            \n            return `B${destination}`;\n            \n        case \"r\":\n            if(player == \"white\" && whiteCastlingRights[0] && startingPos == \"h1\"){\n                whiteCastlingRights[0] = false;\n            }\n            else if(player == \"white\" && whiteCastlingRights[1] && startingPos == \"a1\"){\n                whiteCastlingRights[1] = false;\n            }\n            else if(player == \"black\" && blackCastlingRights[0] && startingPos == \"h8\"){\n                blackCastlingRights[0] = false;\n            }\n            else if(player == \"black\" && blackCastlingRights[1] && startingPos == \"a8\"){\n                blackCastlingRights[1] = false;\n            }\n\n            for(let rook in myPieces.rooks){\n                if(rook != startingPos && myPieces.rooks[rook].includes(destination)){\n                    if(rook.charAt(0) == startingPos.charAt(0)){\n                        if(data[destination].charAt(0) == theirColour.charAt(0)){\n                            return `R${startingPos.charAt(1)}x${destination}`;\n                        }\n                        return `R${startingPos.charAt(1)}${destination}`;\n                    }\n                    if(data[destination].charAt(0) == theirColour.charAt(0)){\n                        return `R${startingPos.charAt(0)}x${destination}`;\n                    }\n                    return `R${startingPos.charAt(0)}${destination}`;\n                }\n            }\n\n            if(data[destination].charAt(0) == theirColour.charAt(0)){\n                return `Rx${destination}`;\n            }\n            \n            return `R${destination}`;\n            \n        case \"q\":\n            for(let queen in myPieces.queens){\n                if(queen != startingPos && myPieces.queens[queen].includes(destination)){\n                    if(queen.charAt(0) == startingPos.charAt(0)){\n                        if(data[destination].charAt(0) == theirColour.charAt(0)){\n                            return `Q${startingPos.charAt(1)}x${destination}`;\n                        }\n                        return `Q${startingPos.charAt(1)}${destination}`;\n                    }\n                    if(data[destination].charAt(0) == theirColour.charAt(0)){\n                        return `Q${startingPos.charAt(0)}x${destination}`;\n                    }\n                    return `Q${startingPos.charAt(0)}${destination}`;\n                }\n            }\n\n            if(data[destination].charAt(0) == theirColour.charAt(0)){\n                return `Qx${destination}`;\n            }\n            \n            return `Q${destination}`;\n            \n        case \"k\":\n            // turn off castling rights\n\n            if(player == \"white\" && (whiteCastlingRights[0] || whiteCastlingRights[1])){\n                whiteCastlingRights = [false, false];\n            }\n            else if(player == \"black\" && (blackCastlingRights[0] || blackCastlingRights[1])){\n                blackCastlingRights = [false, false];\n            }\n\n            // if castles\n            if(startingPos.charAt(0) == \"e\" && (destination.charAt(0) == \"g\" || destination.charAt(0) == \"h\")){\n                return \"O-O\";\n            }\n            else if(startingPos.charAt(0) == \"e\" && (destination.charAt(0) == \"c\" || destination.charAt(0) == \"a\")){\n                return \"O-O-O\";\n            }\n\n            // capture\n\n            if(data[destination].charAt(0) == theirColour.charAt(0)){\n                return `Kx${destination}`;\n            }\n\n            // move to empty square\n            \n            return `K${destination}`;\n\n            \n    }\n}\n\nconst onClick = ([piece, player, setPlayer, pieceLoc, currentSquareTypes, setSquareTypes, data, setData, promotion, setPromotion, setPromotionColour, moveHistory, setMoveHistory, material, setMaterial, move, capture, gamemode]) => {\n\n    if(promotion == \"enabled\") return;\n\n    let myPieces, theirPieces;\n    let nextPlayer;\n\n    const updatePieces = () => {\n        if(player == \"white\"){\n            myPieces = whitePieces;\n            theirPieces = blackPieces;\n            nextPlayer = \"black\";\n        }\n        else {\n            myPieces = blackPieces;\n            theirPieces = whitePieces;\n            nextPlayer = \"white\";\n        }\n    }\n\n    updatePieces();\n\n    let newSquareTypes = {...currentSquareTypes};\n\n    const deselectSelectedPiece = () => {\n        newSquareTypes[selectedPieceLoc] = newSquareTypes[selectedPieceLoc].substring(0, newSquareTypes[selectedPieceLoc].indexOf(\"-highlighted\"));\n        setSquareTypes(newSquareTypes);\n\n        pieceSelected = \"\";\n        selectedPieceLoc = \"\";\n    }\n\n    const selectNewPiece = () => {\n        pieceSelected = piece;\n        selectedPieceLoc = pieceLoc;\n\n        \n        newSquareTypes[pieceLoc] += \"-highlighted\";\n        setSquareTypes(newSquareTypes);\n    }\n\n    const checkForPromotion = () => {\n        \n        if(pieceSelected.charAt(1) == \"p\"){\n            if(player == \"white\" && pieceLoc.charAt(1) == \"8\"){\n                return true;\n            }\n            else if(player == \"black\" && pieceLoc.charAt(1) == \"1\"){\n                return true;\n            }\n        }\n        return false;\n    }\n\n    \n    // castle\n    if(pieceSelected.charAt(1) == \"k\"){\n        let kingLoc = Object.keys(myPieces.king)[0];\n        if(player == \"white\"){\n            if(myPieces.king[kingLoc].includes(\"O-O\") && (pieceLoc == \"g1\" || pieceLoc == \"h1\")){\n            \n                //move piece\n                let newData = {...data};\n                newData[selectedPieceLoc] = \"\";\n                newData[\"h1\"] = \"\";\n                newData[\"g1\"] = pieceSelected;\n                newData[\"f1\"] = \"wr\";\n\n                delete myPieces.king[selectedPieceLoc];\n                myPieces.king[\"g1\"] = [];\n\n                delete myPieces.rooks[\"h1\"];\n                myPieces.rooks[\"f1\"] = [];\n\n                setData(newData);\n                let newMoveHistory = getNewMoveHistory(data, selectedPieceLoc, pieceLoc, myPieces, player, moveHistory);\n                updateLegalMoves(newData, newMoveHistory);\n                updatePieces();\n                updateMoveHistory(newMoveHistory, setMoveHistory, getMoveSuffix(myPieces, theirPieces));\n                setPlayer(nextPlayer);\n                deselectSelectedPiece();\n\n                move.play();\n                //console.log(\"move 1 played\");\n\n                whiteCastlingRights = [false, false];\n                return;\n            }\n            else if(myPieces.king[kingLoc].includes(\"O-O-O\") && (pieceLoc == \"c1\" || pieceLoc == \"a1\")){\n                //move piece\n                let newData = {...data};\n                newData[selectedPieceLoc] = \"\";\n                newData[\"a1\"] = \"\";\n                newData[\"c1\"] = pieceSelected;\n                newData[\"d1\"] = \"wr\";\n\n                delete myPieces.king[selectedPieceLoc];\n                myPieces.king[\"c1\"] = [];\n\n                delete myPieces.rooks[\"a1\"];\n                myPieces.rooks[\"d1\"] = [];\n\n                setData(newData);\n                let newMoveHistory = getNewMoveHistory(data, selectedPieceLoc, pieceLoc, myPieces, player, moveHistory);\n                updateLegalMoves(newData, newMoveHistory);\n                updatePieces();\n                updateMoveHistory(newMoveHistory, setMoveHistory, getMoveSuffix(myPieces, theirPieces));\n                setPlayer(nextPlayer);\n                deselectSelectedPiece();\n\n                move.play();\n                //console.log(\"move 2 played\");\n\n                whiteCastlingRights = [false, false];\n                return;\n            }\n        }\n        else{\n            if(myPieces.king[kingLoc].includes(\"O-O\") && (pieceLoc == \"g8\" || pieceLoc == \"h8\")){\n            \n                //move piece\n                let newData = {...data};\n                newData[selectedPieceLoc] = \"\";\n                newData[\"h8\"] = \"\";\n                newData[\"g8\"] = pieceSelected;\n                newData[\"f8\"] = \"br\";\n\n                delete myPieces.king[selectedPieceLoc];\n                myPieces.king[\"g8\"] = [];\n\n                delete myPieces.rooks[\"h8\"];\n                myPieces.rooks[\"f8\"] = [];\n\n                setData(newData);\n                let newMoveHistory = getNewMoveHistory(data, selectedPieceLoc, pieceLoc, myPieces, player, moveHistory);\n                updateLegalMoves(newData, newMoveHistory);\n                updatePieces();\n                updateMoveHistory(newMoveHistory, setMoveHistory, getMoveSuffix(myPieces, theirPieces));\n                setPlayer(nextPlayer);\n                deselectSelectedPiece();\n\n                move.play();\n                //console.log(\"move 3 played\");\n\n                blackCastlingRights = [false, false];\n                return;\n            }\n            else if(myPieces.king[kingLoc].includes(\"O-O-O\") && (pieceLoc == \"c8\" || pieceLoc == \"a8\")){\n                //move piece\n                let newData = {...data};\n                newData[selectedPieceLoc] = \"\";\n                newData[\"a8\"] = \"\";\n                newData[\"c8\"] = pieceSelected;\n                newData[\"d8\"] = \"br\";\n\n                delete myPieces.king[selectedPieceLoc];\n                myPieces.king[\"c8\"] = [];\n\n                delete myPieces.rooks[\"a8\"];\n                myPieces.rooks[\"d8\"] = [];\n\n                setData(newData);\n                let newMoveHistory = getNewMoveHistory(data, selectedPieceLoc, pieceLoc, myPieces, player, moveHistory);\n                updateLegalMoves(newData, newMoveHistory);\n                updatePieces();\n                updateMoveHistory(newMoveHistory, setMoveHistory, getMoveSuffix(myPieces, theirPieces));\n                setPlayer(nextPlayer);\n                deselectSelectedPiece();\n\n                move.play();\n                //console.log(\"move 4 played\");\n\n                blackCastlingRights = [false, false];\n                return;\n            }\n        }\n        \n    }\n\n    // En Passant\n    if(pieceSelected.charAt(1) == \"p\"){\n        if(myPieces.pawns[selectedPieceLoc].includes(\"x->\")){\n            let squaresUp = 1;\n            if(pieceSelected.charAt(0) == \"b\"){\n                squaresUp = -1;\n            }\n\n            if(pieceLoc == (nextChar(selectedPieceLoc.charAt(0)) + (parseInt(selectedPieceLoc.charAt(1)) + squaresUp))){\n                //move piece\n                let newData = {...data};\n                newData[selectedPieceLoc] = \"\";\n                newData[pieceLoc] = pieceSelected;\n                let theirPawnLoc = pieceLoc.charAt(0) + (parseInt(pieceLoc.charAt(1))-squaresUp);\n                newData[theirPawnLoc] = \"\";\n\n                if(player == \"white\"){\n                    let newMaterial = {...material};\n                    newMaterial.white[\"p\"]++;\n                    setMaterial(newMaterial);\n                }\n                else {\n                    let newMaterial = {...material};\n                    newMaterial.black[\"p\"]++;\n                    setMaterial(newMaterial);\n                }\n                \n\n                delete myPieces[getPieceTypeByLetter(pieceSelected.charAt(1))][selectedPieceLoc];\n                myPieces[getPieceTypeByLetter(pieceSelected.charAt(1))][pieceLoc] = [];\n\n                \n                delete theirPieces[getPieceTypeByLetter(data[theirPawnLoc].charAt(1))][theirPawnLoc];\n\n\n                setData(newData);\n                let newMoveHistory = getNewMoveHistory(data, selectedPieceLoc, pieceLoc, myPieces, player, moveHistory);\n                updateLegalMoves(newData, newMoveHistory);\n                updatePieces();\n                updateMoveHistory(newMoveHistory, setMoveHistory, getMoveSuffix(myPieces, theirPieces));\n                setPlayer(nextPlayer);\n                deselectSelectedPiece();\n\n                capture.play();\n\n                return;\n            }\n            \n        }\n        else if(myPieces.pawns[selectedPieceLoc].includes(\"<-x\")){\n            let squaresUp = 1;\n            if(pieceSelected.charAt(0) == \"b\"){\n                squaresUp = -1;\n            }\n\n            if(pieceLoc == (prevChar(selectedPieceLoc.charAt(0)) + (parseInt(selectedPieceLoc.charAt(1)) + squaresUp))){\n                //move piece\n                let newData = {...data};\n                newData[selectedPieceLoc] = \"\";\n                newData[pieceLoc] = pieceSelected;\n                let theirPawnLoc = pieceLoc.charAt(0) + (parseInt(pieceLoc.charAt(1))-squaresUp);\n                newData[theirPawnLoc] = \"\";\n\n                if(player == \"white\"){\n                    let newMaterial = {...material};\n                    newMaterial.white[\"p\"]++;\n                    setMaterial(newMaterial);\n                }\n                else {\n                    let newMaterial = {...material};\n                    newMaterial.black[\"p\"]++;\n                    setMaterial(newMaterial);\n                }\n                \n\n                delete myPieces[getPieceTypeByLetter(pieceSelected.charAt(1))][selectedPieceLoc];\n                myPieces[getPieceTypeByLetter(pieceSelected.charAt(1))][pieceLoc] = [];\n\n\n                \n                delete theirPieces[getPieceTypeByLetter(data[theirPawnLoc].charAt(1))][theirPawnLoc];\n\n\n                setData(newData);\n                let newMoveHistory = getNewMoveHistory(data, selectedPieceLoc, pieceLoc, myPieces, player, moveHistory);\n                updateLegalMoves(newData, newMoveHistory);\n                updatePieces();\n                updateMoveHistory(newMoveHistory, setMoveHistory, getMoveSuffix(myPieces, theirPieces));\n                setPlayer(nextPlayer);\n                deselectSelectedPiece();\n\n                capture.play();\n\n                return;\n            }\n            \n        }\n    }\n\n    // move a piece to empty square\n    if(piece == \"\" && pieceSelected != \"\") {\n\n        // move piece if possible\n        if(myPieces[getPieceTypeByLetter(pieceSelected.charAt(1))][selectedPieceLoc].includes(pieceLoc)){\n\n            if(checkForPromotion()){\n                isCapture = false;\n                targetLoc = pieceLoc;\n                targetPiece = \"\";\n                setPromotionColour(player.charAt(0));\n                setPromotion(\"enabled\");\n                return;\n            }\n\n            //move piece\n            let newData = {...data};\n            newData[selectedPieceLoc] = \"\";\n            newData[pieceLoc] = pieceSelected;\n\n            delete myPieces[getPieceTypeByLetter(pieceSelected.charAt(1))][selectedPieceLoc];\n            myPieces[getPieceTypeByLetter(pieceSelected.charAt(1))][pieceLoc] = [];\n\n            setData(newData);\n            let newMoveHistory = getNewMoveHistory(data, selectedPieceLoc, pieceLoc, myPieces, player, moveHistory);\n            updateLegalMoves(newData, newMoveHistory);\n            updatePieces();\n            updateMoveHistory(newMoveHistory, setMoveHistory, getMoveSuffix(myPieces, theirPieces));\n            setPlayer(nextPlayer);\n            move.play();\n            //console.log(\"move 5 played\");\n\n        }\n\n        deselectSelectedPiece();\n    }\n    // capture piece\n    else if(piece.charAt(0) == nextPlayer.charAt(0) && pieceSelected != \"\"){\n        // move piece if possible\n        if(myPieces[getPieceTypeByLetter(pieceSelected.charAt(1))][selectedPieceLoc].includes(pieceLoc)){\n\n            if(checkForPromotion()){\n                isCapture = true;\n                targetLoc = pieceLoc;\n                targetPiece = piece;\n                setPromotionColour(player.charAt(0));\n                setPromotion(\"enabled\");\n                return;\n            }\n\n\n            //move piece\n            let newData = {...data};\n            newData[selectedPieceLoc] = \"\";\n            newData[pieceLoc] = pieceSelected;\n\n            if(player == \"white\"){\n                let newMaterial = {...material};\n                newMaterial.white[data[pieceLoc].charAt(1)]++;\n                setMaterial(newMaterial);\n            }\n            else {\n                let newMaterial = {...material};\n                newMaterial.black[data[pieceLoc].charAt(1)]++;\n                setMaterial(newMaterial);\n            }\n\n            delete myPieces[getPieceTypeByLetter(pieceSelected.charAt(1))][selectedPieceLoc];\n            myPieces[getPieceTypeByLetter(pieceSelected.charAt(1))][pieceLoc] = [];\n\n            delete theirPieces[getPieceTypeByLetter(piece.charAt(1))][pieceLoc];\n\n\n            setData(newData);\n            let newMoveHistory = getNewMoveHistory(data, selectedPieceLoc, pieceLoc, myPieces, player, moveHistory);\n            updateLegalMoves(newData, newMoveHistory);\n            updatePieces();\n            updateMoveHistory(newMoveHistory, setMoveHistory, getMoveSuffix(myPieces, theirPieces));\n            setPlayer(nextPlayer);\n            capture.play();\n\n        }\n\n        deselectSelectedPiece();\n    }\n\n    // select a piece when no other is selected\n    else if((gamemode == \"Self Play\" || player == HUMAN_PLAYER) && (player == \"white\" && piece.charAt(0) == 'w' || player == \"black\" && piece.charAt(0) == 'b') && pieceSelected == \"\"){\n        selectNewPiece();\n    }\n\n    // deselect the selected piece by clicking on it\n    else if((gamemode == \"Self Play\" || player == HUMAN_PLAYER) && (player == \"white\" && piece.charAt(0) == 'w' || player == \"black\" && piece.charAt(0) == 'b') && pieceSelected != \"\" && selectedPieceLoc == pieceLoc){\n        deselectSelectedPiece();\n    }\n\n    // deselect the selected piece and select a different piece\n    else if((gamemode == \"Self Play\" || player == HUMAN_PLAYER) && (player == \"white\" && piece.charAt(0) == 'w' || player == \"black\" && piece.charAt(0) == 'b') && pieceSelected != \"\" && piece != \"\" && selectedPieceLoc != pieceLoc){\n        deselectSelectedPiece();\n        selectNewPiece();\n    }\n    \n}\n\nconst Board = (props) => {\n\n    const board = [];\n    \n    let [player, setPlayer] = useState(\"white\");\n    // let [move] = useState(new sound(moveSound));\n    // let [capture] = useState(new sound(captureSound));\n    \n    \n    let row, squareType, letter, pieceName, firstSquareLight = true;\n    \n\n    let newSquareTypes = {};\n    for(let i = 0; i < 8; i++){\n        letter = \"a\";\n        let lightSquare = firstSquareLight;\n        for(let j = 0; j < 8; j++){\n            if(lightSquare){\n                squareType = \"light-square\";\n            }\n            else {\n                squareType = \"dark-square\";\n            }\n            newSquareTypes[letter+(8-i)] = squareType;\n\n\n            letter = nextChar(letter);\n            lightSquare = !lightSquare;\n        }\n        firstSquareLight = !firstSquareLight;\n    }\n\n    let startingPos = {\n        a1: \"wr\", b1: \"wn\", c1: \"wb\", d1: \"wq\", e1: \"wk\", f1: \"wb\", g1: \"wn\", h1: \"wr\",\n        a2: \"wp\", b2: \"wp\", c2: \"wp\", d2: \"wp\", e2: \"wp\", f2: \"wp\", g2: \"wp\", h2: \"wp\",\n        a3: \"\", b3: \"\", c3: \"\", d3: \"\", e3: \"\", f3: \"\", g3: \"\", h3: \"\",\n        a4: \"\", b4: \"\", c4: \"\", d4: \"\", e4: \"\", f4: \"\", g4: \"\", h4: \"\",\n        a5: \"\", b5: \"\", c5: \"\", d5: \"\", e5: \"\", f5: \"\", g5: \"\", h5: \"\",\n        a6: \"\", b6: \"\", c6: \"\", d6: \"\", e6: \"\", f6: \"\", g6: \"\", h6: \"\",\n        a7: \"bp\", b7: \"bp\", c7: \"bp\", d7: \"bp\", e7: \"bp\", f7: \"bp\", g7: \"bp\", h7: \"bp\",\n        a8: \"br\", b8: \"bn\", c8: \"bb\", d8: \"bq\", e8: \"bk\", f8: \"bb\", g8: \"bn\", h8: \"br\",\n    };\n\n    let [currentSquareTypes, setSquareTypes] = useState(newSquareTypes);\n    let [data, setData] = useState(startingPos);\n\n    updateLegalMoves(data, props.moveHistory);\n\n    useEffect(() => {\n        if(props.promotionPiece != \"\"){\n            let myPieces, theirPieces, nextPlayer, newData = {...data}, newPiece = props.promotionPiece;\n            if(player == \"white\"){\n                myPieces = whitePieces;\n                theirPieces = blackPieces;\n                nextPlayer = \"black\";\n            }\n            else {\n                myPieces = blackPieces;\n                theirPieces = whitePieces;\n                nextPlayer = \"white\";\n            }\n\n            if(!isCapture){\n                //move piece\n                newData[selectedPieceLoc] = \"\";\n                newData[targetLoc] = player.charAt(0) + props.promotionPiece;\n\n                if(player == \"white\"){\n                    let newMaterial = {...props.material};\n                    newMaterial.white[props.promotionPiece]++;\n                    props.setMaterial(newMaterial);\n                }\n                else {\n                    let newMaterial = {...props.material};\n                    newMaterial.black[props.promotionPiece]++;\n                    props.setMaterial(newMaterial);\n                }\n\n                delete myPieces[getPieceTypeByLetter(pieceSelected.charAt(1))][selectedPieceLoc];\n                myPieces[getPieceTypeByLetter(props.promotionPiece)][targetLoc] = [];  \n                move.play();         \n                //console.log(\"move 6 played\");\n            }\n            else {\n                //move piece\n                newData[selectedPieceLoc] = \"\";\n                newData[targetLoc] = player.charAt(0) + props.promotionPiece;\n\n                if(player == \"white\"){\n                    let newMaterial = {...props.material};\n                    newMaterial.white[data[targetLoc].charAt(1)]++;\n                    newMaterial.white[props.promotionPiece]++;\n                    props.setMaterial(newMaterial);\n                }\n                else {\n                    let newMaterial = {...props.material};\n                    newMaterial.black[data[targetLoc].charAt(1)]++;\n                    newMaterial.black[props.promotionPiece]++;\n                    props.setMaterial(newMaterial);\n                }\n\n                delete myPieces[getPieceTypeByLetter(pieceSelected.charAt(1))][selectedPieceLoc];\n                myPieces[getPieceTypeByLetter(props.promotionPiece)][targetLoc] = [];\n\n                delete theirPieces[getPieceTypeByLetter(targetPiece.charAt(1))][targetLoc];\n                capture.play();\n            }\n\n            props.setPromotion(\"disabled\");\n            props.setPromotionPiece(\"\");\n\n            let newSquareTypes = {...currentSquareTypes};\n\n            newSquareTypes[selectedPieceLoc] = newSquareTypes[selectedPieceLoc].substring(0, newSquareTypes[selectedPieceLoc].indexOf(\"-highlighted\"));\n            setSquareTypes(newSquareTypes);\n\n            setData(newData);\n\n            let newMoveHistory = getNewMoveHistory(data, selectedPieceLoc, targetLoc, myPieces, player, props.moveHistory);\n\n            updateLegalMoves(newData, newMoveHistory);\n\n            if(player == \"white\"){\n                myPieces = whitePieces;\n                theirPieces = blackPieces;\n                nextPlayer = \"black\";\n            }\n            else {\n                myPieces = blackPieces;\n                theirPieces = whitePieces;\n                nextPlayer = \"white\";\n            }\n\n            updateMoveHistory(newMoveHistory, props.setMoveHistory, getMoveSuffix(myPieces, theirPieces, newPiece));\n            \n            setPlayer(nextPlayer);\n\n            pieceSelected = \"\";\n            selectedPieceLoc = \"\";\n        }\n    }, [props.promotionPiece]);\n\n    useEffect(() => {\n        if(props.gamemode == \"AI\" && player == AI_PLAYER){ // props.gamemode == \"AI\" && player == AI_PLAYER\n\n            // fetch('http://localhost:3001/api', {\n            //     method: \"POST\",\n            //     headers: {\n            //         'content-type': \"application/json\"\n            //     },\n            //     body: JSON.stringify({\n            //         hello: \"Joey\"\n            //     })\n                \n            // }).then(res => {\n            //     if(res.ok) console.log(\"Success\");\n            //     else console.log(\"Failure\");\n            // }).catch(err => console.log(err));\n            \n\n            let humanPieces, AiPieces, AiCastlingRights, humanCastlingRights;\n            if(AI_PLAYER == \"white\"){\n                humanPieces = JSON.parse(JSON.stringify(blackPieces));\n                AiPieces = JSON.parse(JSON.stringify(whitePieces));\n                AiCastlingRights = [...whiteCastlingRights];\n                humanCastlingRights = [...blackCastlingRights];\n            }\n            else{\n                humanPieces = JSON.parse(JSON.stringify(whitePieces));\n                AiPieces = JSON.parse(JSON.stringify(blackPieces));\n                humanCastlingRights = [...whiteCastlingRights];\n                AiCastlingRights = [...blackCastlingRights];\n            }\n\n            let tempData = {...data};\n            let material = JSON.parse(JSON.stringify(props.material));\n            let moveHistory = [...props.moveHistory];\n\n            const calculateNetMaterial = (mat) => {\n                let whiteMaterial = mat.white[\"p\"] + mat.white[\"n\"]*3 + mat.white[\"b\"]*3 + mat.white[\"r\"]*5 + mat.white[\"q\"]*9;\n                let blackMaterial = mat.black[\"p\"] + mat.black[\"n\"]*3 + mat.black[\"b\"]*3 + mat.black[\"r\"]*5 + mat.black[\"q\"]*9;\n\n                return whiteMaterial - blackMaterial;\n            }\n\n            // console.log(AiPieces);\n            let possibleMoves = []\n            for(let pieceType in AiPieces){\n                for(let currPieceLoc in AiPieces[pieceType]){\n                    for(let dest of AiPieces[pieceType][currPieceLoc]){\n                        possibleMoves.push({pieceType: pieceType, initialPos: currPieceLoc, destination: dest});\n                    }\n                }\n            }\n\n            if(possibleMoves.length > 0){\n                let index = Math.floor(Math.random() * possibleMoves.length);\n                let randomMove = possibleMoves[index];\n\n                // call once to select the piece\n                //onClick([data[randomMove.initialPos], AI_PLAYER, setPlayer, randomMove.initialPos, currentSquareTypes, setSquareTypes, data, setData, props.promotion, props.setPromotion, props.setPromotionColour, props.moveHistory, props.setMoveHistory, props.material, props.setMaterial, move, capture, props.gamemode]);\n                let newSquareTypes = {...currentSquareTypes};\n\n                pieceSelected = data[randomMove.initialPos];\n                selectedPieceLoc = randomMove.initialPos;\n\n                \n                newSquareTypes[randomMove.initialPos] += \"-highlighted\";\n\n                // call again to move the piece\n                onClick([data[randomMove.destination], AI_PLAYER, setPlayer, randomMove.destination, newSquareTypes, setSquareTypes, data, setData, props.promotion, props.setPromotion, props.setPromotionColour, props.moveHistory, props.setMoveHistory, props.material, props.setMaterial, move, capture, props.gamemode]);\n            }           \n\n            // build decision tree\n            // let tree = {eval: 0, children: [], data: tempData, moveHistory: moveHistory, AiPieces: AiPieces, humanPieces: humanPieces, AiCastlingRights: AiCastlingRights, humanCastlingRights: humanCastlingRights, material: material};\n\n            // const buildTree = (tree, data, moveHistory, myPieces, theirPieces, myColour, myCastlingRights, theirCastlingRights, material, currentDepth) => {\n            //     let theirColour = (myColour == \"white\") ? \"black\" : \"white\";\n                \n            //     for(let pieceType in myPieces){\n            //         for(let pieceLoc in myPieces[pieceType]){\n            //             for(let destination of myPieces[pieceType][pieceLoc]){\n                            \n            //                 let newMoveHistory = [...moveHistory];\n            //                 let newMaterial = JSON.parse(JSON.stringify(material));\n            //                 let newData = JSON.parse(JSON.stringify(data));\n            //                 let myNewPieces = JSON.parse(JSON.stringify(myPieces));\n            //                 let theirNewPieces = JSON.parse(JSON.stringify(theirPieces));\n            //                 let myNewCastlingRights = [...myCastlingRights];\n            //                 let theirNewCastlingRights = [...theirCastlingRights];\n            //                 let newAiCastlingRights = (myColour == AI_PLAYER) ? myNewCastlingRights : theirNewCastlingRights;\n            //                 let newHumanCastlingRights = (myColour == HUMAN_PLAYER) ? myNewCastlingRights : theirNewCastlingRights;\n            //                 if(pieceType == \"king\") {\n            //                     myNewCastlingRights = [false, false];\n            //                 }\n            //                 if(destination == \"O-O\"){\n            //                     if(myColour == \"white\"){\n                                    \n            //                         newData[\"e1\"] = \"\";\n            //                         newData[\"h1\"] = \"\";\n            //                         newData[\"g1\"] = \"wk\";\n            //                         newData[\"f1\"] = \"wr\";\n    \n            //                         delete myNewPieces.king[\"e1\"];\n            //                         myNewPieces.king[\"g1\"] = [];\n    \n            //                         delete myNewPieces.rooks[\"h1\"];\n            //                         myNewPieces.rooks[\"f1\"] = [];\n    \n            //                         newMoveHistory.push({initialPos: \"e1\", destination: \"g1\", piece: \"wk\", name: \"O-O\"});\n    \n            //                         myNewPieces = calculateLegalMoves(myNewPieces, theirNewPieces, myColour, newData, newMoveHistory);\n            //                         theirNewPieces = calculateLegalMoves(theirNewPieces, myNewPieces, theirColour, newData, newMoveHistory);\n    \n            //                         newMoveHistory[newMoveHistory.length-1].name += getMoveSuffix(myNewPieces, theirNewPieces);\n            //                     }\n            //                     else {\n            //                         newData[\"e8\"] = \"\";\n            //                         newData[\"h8\"] = \"\";\n            //                         newData[\"g8\"] = \"bk\";\n            //                         newData[\"f8\"] = \"br\";\n    \n            //                         delete myNewPieces.king[\"e8\"];\n            //                         myNewPieces.king[\"g8\"] = [];\n    \n            //                         delete myNewPieces.rooks[\"h8\"];\n            //                         myNewPieces.rooks[\"f8\"] = [];\n    \n            //                         newMoveHistory.push({initialPos: \"e8\", destination: \"g8\", piece: \"bk\", name: \"O-O\"});\n                                \n            //                         myNewPieces = calculateLegalMoves(myNewPieces, theirNewPieces, myColour, newData, newMoveHistory);\n            //                         theirNewPieces = calculateLegalMoves(theirNewPieces, myNewPieces, theirColour, newData, newMoveHistory);\n    \n            //                         newMoveHistory[newMoveHistory.length-1].name += getMoveSuffix(myNewPieces, theirNewPieces);\n            //                     }\n                                \n            //                 }\n            //                 else if(destination == \"O-O-O\"){\n            //                     if(myColour == \"white\"){\n                                    \n            //                         newData[\"e1\"] = \"\";\n            //                         newData[\"a1\"] = \"\";\n            //                         newData[\"c1\"] = \"wk\";\n            //                         newData[\"d1\"] = \"wr\";\n    \n            //                         delete myNewPieces.king[\"e1\"];\n            //                         myNewPieces.king[\"c1\"] = [];\n    \n            //                         delete myNewPieces.rooks[\"a1\"];\n            //                         myNewPieces.rooks[\"d1\"] = [];\n    \n            //                         newMoveHistory.push({initialPos: \"e1\", destination: \"c1\", piece: \"wk\", name: \"O-O-O\"});\n                                \n            //                         myNewPieces = calculateLegalMoves(myNewPieces, theirNewPieces, myColour, newData, newMoveHistory);\n            //                         theirNewPieces = calculateLegalMoves(theirNewPieces, myNewPieces, theirColour, newData, newMoveHistory);\n    \n            //                         newMoveHistory[newMoveHistory.length-1].name += getMoveSuffix(myNewPieces, theirNewPieces);\n            //                     }\n            //                     else {\n            //                         newData[\"e8\"] = \"\";\n            //                         newData[\"a8\"] = \"\";\n            //                         newData[\"c8\"] = \"bk\";\n            //                         newData[\"d8\"] = \"br\";\n    \n            //                         delete myNewPieces.king[\"e8\"];\n            //                         myNewPieces.king[\"c8\"] = [];\n    \n            //                         delete myNewPieces.rooks[\"a8\"];\n            //                         myNewPieces.rooks[\"d8\"] = [];\n    \n            //                         newMoveHistory.push({initialPos: \"e8\", destination: \"c8\", piece: \"bk\", name: \"O-O-O\"});\n                                \n            //                         myNewPieces = calculateLegalMoves(myNewPieces, theirNewPieces, myColour, newData, newMoveHistory);\n            //                         theirNewPieces = calculateLegalMoves(theirNewPieces, myNewPieces, theirColour, newData, newMoveHistory);\n    \n            //                         newMoveHistory[newMoveHistory.length-1].name += getMoveSuffix(myNewPieces, theirNewPieces);\n            //                     }\n            //                 }\n            //                 else if(destination == \"<-x\"){\n            //                     let direction = 1;\n            //                     if(myColour == \"black\"){\n            //                         direction = -1;\n            //                     }\n            //                     let myNewPawnLoc = prevChar(pieceLoc.charAt(0)) + (parseInt(pieceLoc.charAt(1)) + direction);\n            //                     let theirPawnLoc = myNewPawnLoc.charAt(0) + (parseInt(myNewPawnLoc.charAt(1) - direction));\n    \n            //                     newData[pieceLoc] = \"\";\n            //                     newData[myNewPawnLoc] = myColour.charAt(0) + \"p\";\n    \n            //                     newData[theirPawnLoc] = \"\";\n    \n            //                     delete myNewPieces.pawns[pieceLoc];\n            //                     myNewPieces.pawns[myNewPawnLoc] = [];\n    \n            //                     delete theirNewPieces.pawns[theirPawnLoc];\n    \n            //                     newMaterial[myColour][\"p\"]++;\n    \n            //                     newMoveHistory.push({initialPos: pieceLoc, destination: myNewPawnLoc, piece: data[pieceLoc], name: generateMoveName(data, pieceLoc, myNewPawnLoc, myPieces, myColour)});\n                            \n            //                     myNewPieces = calculateLegalMoves(myNewPieces, theirNewPieces, myColour, newData, newMoveHistory);\n            //                     theirNewPieces = calculateLegalMoves(theirNewPieces, myNewPieces, theirColour, newData, newMoveHistory);\n    \n            //                     newMoveHistory[newMoveHistory.length-1].name += getMoveSuffix(myNewPieces, theirNewPieces);\n            //                 }\n            //                 else if(destination == \"x->\"){\n            //                     let direction = 1;\n            //                     if(myColour == \"black\"){\n            //                         direction = -1;\n            //                     }\n            //                     let myNewPawnLoc = nextChar(pieceLoc.charAt(0)) + (parseInt(pieceLoc.charAt(1)) + direction);\n            //                     let theirPawnLoc = myNewPawnLoc.charAt(0) + (parseInt(myNewPawnLoc.charAt(1) - direction));\n    \n            //                     newData[pieceLoc] = \"\";\n            //                     newData[myNewPawnLoc] = myColour.charAt(0) + \"p\";\n    \n            //                     newData[theirPawnLoc] = \"\";\n    \n            //                     delete myNewPieces.pawns[pieceLoc];\n            //                     myNewPieces.pawns[myNewPawnLoc] = [];\n    \n            //                     delete theirNewPieces.pawns[theirPawnLoc];\n    \n            //                     newMaterial[myColour][\"p\"]++;\n    \n            //                     newMoveHistory.push({initialPos: pieceLoc, destination: myNewPawnLoc, piece: data[pieceLoc], name: generateMoveName(data, pieceLoc, myNewPawnLoc, myPieces, myColour)});\n                            \n            //                     myNewPieces = calculateLegalMoves(myNewPieces, theirNewPieces, myColour, newData, newMoveHistory);\n            //                     theirNewPieces = calculateLegalMoves(theirNewPieces, myNewPieces, theirColour, newData, newMoveHistory);\n    \n            //                     newMoveHistory[newMoveHistory.length-1].name += getMoveSuffix(myNewPieces, theirNewPieces);\n            //                 }\n            //                 else if(data[destination] == \"\"){\n            //                     newData[pieceLoc] = \"\";\n            //                     delete myNewPieces[pieceType][pieceLoc];\n    \n            //                     if(myColour == \"white\" && pieceType == \"pawns\" && destination.charAt(1) == \"8\" || (myColour == \"black\" && pieceType == \"pawns\" && destination.charAt(1) == \"1\")){\n            //                         let newMoveHistory2 = [...newMoveHistory];\n            //                         let newMaterial2 = {...newMaterial};\n            //                         let newData2 = {...newData};\n            //                         let myNewPieces2 = {...myNewPieces};\n            //                         let theirNewPieces2 = {...theirNewPieces};\n\n            //                         let AiPieces = (myColour == AI_PLAYER) ? myNewPieces2 : theirNewPieces2;\n            //                         let humanPieces = (myColour == HUMAN_PLAYER) ? myNewPieces2 : theirNewPieces2;\n    \n            //                         newMoveHistory2.push({initialPos: pieceLoc, destination: destination, piece: data[pieceLoc], name: generateMoveName(data, pieceLoc, destination, myPieces, myColour)});\n            //                         newMaterial2[myColour][\"q\"]++;\n            //                         newData2[destination] = myColour.charAt(0) + \"q\";\n            //                         myNewPieces2[\"queens\"][destination] = [];\n            //                         myNewPieces2 = calculateLegalMoves(myNewPieces2, theirNewPieces2, myColour, newData2, newMoveHistory2);\n            //                         theirNewPieces2 = calculateLegalMoves(theirNewPieces2, myNewPieces2, theirColour, newData2, newMoveHistory2);\n            //                         newMoveHistory2[newMoveHistory2.length-1].name += getMoveSuffix(myNewPieces2, theirNewPieces2, \"Q\");\n\n            //                         let subtree = {eval: 0, children: [], data: {...newData2}, moveHistory: [...newMoveHistory2], AiPieces: {...AiPieces}, humanPieces: {...humanPieces}, AiCastlingRights: newAiCastlingRights, humanCastlingRights: newHumanCastlingRights, material: {...newMaterial2}};\n            //                         if(currentDepth < MAX_DEPTH){\n            //                             buildTree(subtree, newData, newMoveHistory, theirPieces, myPieces, theirColour, theirCastlingRights, myCastlingRights, newMaterial, currentDepth + 1);\n            //                         }\n            //                         tree.children.push(subtree);\n                                    \n            //                         newMoveHistory2 = [...newMoveHistory];\n            //                         newMaterial2 = {...newMaterial};\n            //                         newData2 = {...newData};\n            //                         myNewPieces2 = {...myNewPieces};\n            //                         theirNewPieces2 = {...theirNewPieces};\n    \n            //                         newMoveHistory2.push({initialPos: pieceLoc, destination: destination, piece: data[pieceLoc], name: generateMoveName(data, pieceLoc, destination, myPieces, myColour)});\n            //                         newMaterial2[myColour][\"n\"]++;\n            //                         newData2[destination] = myColour.charAt(0) + \"n\";\n            //                         myNewPieces2[\"knights\"][destination] = [];\n            //                         myNewPieces2 = calculateLegalMoves(myNewPieces2, theirNewPieces2, myColour, newData2, newMoveHistory2);\n            //                         theirNewPieces2 = calculateLegalMoves(theirNewPieces2, myNewPieces2, theirColour, newData2, newMoveHistory2);\n            //                         newMoveHistory2[newMoveHistory2.length-1].name += getMoveSuffix(myNewPieces2, theirNewPieces2, \"N\");\n                                    \n            //                         subtree = {eval: 0, children: [], data: {...newData2}, moveHistory: [...newMoveHistory2], AiPieces: {...AiPieces}, humanPieces: {...humanPieces}, AiCastlingRights: newAiCastlingRights, humanCastlingRights: newHumanCastlingRights, material: {...newMaterial2}};\n            //                         if(currentDepth < MAX_DEPTH){\n            //                             buildTree(subtree, newData, newMoveHistory, theirPieces, myPieces, theirColour, theirCastlingRights, myCastlingRights, newMaterial, currentDepth + 1);\n            //                         }\n            //                         tree.children.push(subtree);\n            //                         continue;\n            //                     }\n    \n            //                     else {\n            //                         newData[destination] = myColour.charAt(0) + getLetterByPieceType(pieceType);\n            //                         myNewPieces[pieceType][destination] = [];\n    \n            //                         newMoveHistory.push({initialPos: pieceLoc, destination: destination, piece: data[pieceLoc], name: generateMoveName(data, pieceLoc, destination, myPieces, myColour)});\n    \n            //                         myNewPieces = calculateLegalMoves(myNewPieces, theirNewPieces, myColour, newData, newMoveHistory);\n            //                         theirNewPieces = calculateLegalMoves(theirNewPieces, myNewPieces, theirColour, newData, newMoveHistory);\n    \n            //                         newMoveHistory[newMoveHistory.length-1].name += getMoveSuffix(myNewPieces, theirNewPieces);\n            //                     }\n            //                 }\n            //                 else {\n    \n            //                     newMaterial[myColour][data[destination].charAt(1)]++;\n            //                     newData[pieceLoc] = \"\";\n    \n            //                     if(myColour == \"white\" && pieceType == \"pawns\" && destination.charAt(1) == \"8\" || (myColour == \"black\" && pieceType == \"pawns\" && destination.charAt(1) == \"1\")){\n            //                         let newMoveHistory2 = [...newMoveHistory];\n            //                         let newMaterial2 = {...newMaterial};\n            //                         let newData2 = JSON.parse(JSON.stringify(newData));\n            //                         let myNewPieces2 = {...myNewPieces};\n            //                         let theirNewPieces2 = {...theirNewPieces};\n\n            //                         let AiPieces = (myColour == AI_PLAYER) ? myNewPieces2 : theirNewPieces2;\n            //                         let humanPieces = (myColour == HUMAN_PLAYER) ? myNewPieces2 : theirNewPieces2;\n    \n            //                         newMoveHistory2.push({initialPos: pieceLoc, destination: destination, piece: data[pieceLoc], name: generateMoveName(data, pieceLoc, destination, myPieces, myColour)});\n            //                         newMaterial2[myColour][\"q\"]++;\n            //                         newData2[destination] = myColour.charAt(0) + \"q\";\n            //                         myNewPieces2[\"queens\"][destination] = [];\n            //                         delete theirNewPieces2[getPieceTypeByLetter(newData[destination].charAt(1))][destination];\n            //                         myNewPieces2 = calculateLegalMoves(myNewPieces2, theirNewPieces2, myColour, newData2, newMoveHistory2);\n            //                         theirNewPieces2 = calculateLegalMoves(theirNewPieces2, myNewPieces2, theirColour, newData2, newMoveHistory2);\n            //                         newMoveHistory2[newMoveHistory2.length-1].name += getMoveSuffix(myNewPieces2, theirNewPieces2, \"Q\");\n\n            //                         let subtree = {eval: 0, children: [], data: {...newData2}, moveHistory: [...newMoveHistory2], AiPieces: {...AiPieces}, humanPieces: {...humanPieces}, AiCastlingRights: newAiCastlingRights, humanCastlingRights: newHumanCastlingRights, material: {...newMaterial2}};\n            //                         if(currentDepth < MAX_DEPTH){\n            //                             buildTree(subtree, newData, newMoveHistory, theirPieces, myPieces, theirColour, theirCastlingRights, myCastlingRights, newMaterial, currentDepth + 1);\n            //                         }\n            //                         tree.children.push(subtree);\n                                    \n            //                         newMoveHistory2 = [...newMoveHistory];\n            //                         newMaterial2 = {...newMaterial};\n            //                         newData2 = {...newData};\n            //                         myNewPieces2 = {...myNewPieces};\n            //                         theirNewPieces2 = {...theirNewPieces};\n    \n            //                         newMoveHistory2.push({initialPos: pieceLoc, destination: destination, piece: data[pieceLoc], name: generateMoveName(data, pieceLoc, destination, myPieces, myColour)});\n            //                         newMaterial2[myColour][\"n\"]++;\n            //                         newData2[destination] = myColour.charAt(0) + \"n\";\n            //                         myNewPieces2[\"knights\"][destination] = [];\n            //                         delete theirNewPieces2[getPieceTypeByLetter(newData[destination].charAt(1))][destination];\n            //                         myNewPieces2 = calculateLegalMoves(myNewPieces2, theirNewPieces2, myColour, newData2, newMoveHistory2);\n            //                         theirNewPieces2 = calculateLegalMoves(theirNewPieces2, myNewPieces2, theirColour, newData2, newMoveHistory2);\n            //                         newMoveHistory2[newMoveHistory2.length-1].name += getMoveSuffix(myNewPieces2, theirNewPieces2, \"N\");\n\n            //                         subtree = {eval: 0, children: [], data: {...newData2}, moveHistory: [...newMoveHistory2], AiPieces: {...AiPieces}, humanPieces: {...humanPieces}, AiCastlingRights: newAiCastlingRights, humanCastlingRights: newHumanCastlingRights, material: {...newMaterial2}};\n            //                         if(currentDepth < MAX_DEPTH){\n            //                             buildTree(subtree, newData, newMoveHistory, theirPieces, myPieces, theirColour, theirCastlingRights, myCastlingRights, newMaterial, currentDepth + 1);\n            //                         }\n            //                         tree.children.push(subtree);\n            //                         continue;\n            //                     }\n            //                     else {\n            //                         myNewPieces[pieceType][destination] = [];\n    \n            //                         delete theirNewPieces[getPieceTypeByLetter(data[destination].charAt(1))][destination];\n    \n            //                         newData[destination] = myColour.charAt(0) + getLetterByPieceType(pieceType);\n    \n            //                         newMoveHistory.push({initialPos: pieceLoc, destination: destination, piece: data[pieceLoc], name: generateMoveName(data, pieceLoc, destination, myPieces, myColour)});\n    \n            //                         myNewPieces = calculateLegalMoves(myNewPieces, theirNewPieces, myColour, newData, newMoveHistory);\n            //                         theirNewPieces = calculateLegalMoves(theirNewPieces, myNewPieces, theirColour, newData, newMoveHistory);\n    \n            //                         newMoveHistory[newMoveHistory.length-1].name += getMoveSuffix(myNewPieces, theirNewPieces);\n            //                     }\n            //                 }\n                            \n            //                 let AiPieces = (myColour == AI_PLAYER) ? myNewPieces : theirNewPieces;\n            //                 let humanPieces = (myColour == HUMAN_PLAYER) ? myNewPieces : theirNewPieces;\n\n            //                 let subtree = {eval: 0, children: [], data: newData, moveHistory: newMoveHistory, AiPieces: AiPieces, humanPieces: humanPieces, AiCastlingRights: newAiCastlingRights, humanCastlingRights: newHumanCastlingRights, material: newMaterial};\n            //                 if(currentDepth < MAX_DEPTH){\n            //                     buildTree(subtree, newData, newMoveHistory, theirPieces, myPieces, theirColour, theirCastlingRights, myCastlingRights, newMaterial, currentDepth + 1);\n            //                 }\n            //                 tree.children.push(subtree);\n                            \n            //             }\n            //         }\n            //     }\n            // }\n            \n            //buildTree(tree, tempData, moveHistory, AiPieces, humanPieces, AI_PLAYER, AiCastlingRights, humanCastlingRights, material, 0);\n            //buildTree(tree, tempData, moveHistory, humanPieces, AiPieces, HUMAN_PLAYER, humanCastlingRights, AiCastlingRights, material, 0);\n\n            \n            //console.log(tree);\n            //console.log(calculateNetMaterial(material));\n\n        }\n    }, [props.gamemode, player]);\n\n\n    \n    for(let i = 0; i < 8; i++){\n        row = [];\n        letter = \"a\";\n        \n        for(let j = 0; j < 8; j++){\n            \n\n            pieceName = data[letter+(8-i)];\n\n            row.push(<Square squareTypes = {currentSquareTypes} squareLoc = {letter+(8-i)} backgroundImage = {pieceName} onClickFunction={onClick} onClickParameters={[pieceName, player, setPlayer, letter+(8-i), currentSquareTypes, setSquareTypes, data, setData, props.promotion, props.setPromotion, props.setPromotionColour, props.moveHistory, props.setMoveHistory, props.material, props.setMaterial, move, capture, props.gamemode]} key = {letter+(8-i)}/>);\n            letter = nextChar(letter);\n        }\n        \n        board.push(<div key={8-i} className=\"board-row\">{row}</div>);\n\n        \n    }\n\n    return (\n        <div className = \"board\">\n            {board}\n        </div>\n      );\n};\n\nexport default Board;","import React from 'react';\n\nconst Promotion = (props) => {\n    return (\n        <div>\n            <button className={`square light-square ${props.promotionColour}q promotion ` + props.promotion} onClick={() => {\n                props.setPromotionPiece(\"q\");\n                props.setPromotion(\"disabled\");\n            }}></button>\n            <button className={`square light-square ${props.promotionColour}r promotion ` + props.promotion} onClick={() => {\n                props.setPromotionPiece(\"r\");\n                props.setPromotion(\"disabled\");\n            }}></button>\n            <button className={`square light-square ${props.promotionColour}n promotion ` + props.promotion} onClick={() => {\n                props.setPromotionPiece(\"n\");\n                props.setPromotion(\"disabled\");\n            }}></button>\n            <button className={`square light-square ${props.promotionColour}b promotion ` + props.promotion} onClick={() => {\n                props.setPromotionPiece(\"b\");\n                props.setPromotion(\"disabled\");\n            }}></button>\n        </div>\n    );\n};\n\nexport default Promotion;","import React, {useEffect} from 'react';\n\nconst MoveHistory = (props) => {\n    useEffect(() => {\n        let newStr = \"\";\n        if(props.moveHistory.length > 0){\n            let i = props.moveHistory.length-1;\n            if(i % 2 == 0){\n                newStr = `${i/2 + 1}.${props.moveHistory[i].name}`;\n            }\n            else {\n                newStr = ` ${props.moveHistory[i].name}</br>`;\n            }\n        }\n        \n        document.getElementById(\"move-history\").innerHTML += newStr;\n        document.getElementById(\"move-history-wrapper\").scrollTop = document.getElementById(\"move-history-wrapper\").scrollHeight;\n    }, [props.moveHistory])\n    \n    return (\n        <div className=\"auto-scroll moveHistory\" id=\"move-history-wrapper\"><p id=\"move-history\"></p></div>\n    );\n};\n\nexport default MoveHistory;","import React, {useState, useEffect} from 'react';\n\nconst Material = (props) => {\n\n    let [netMaterial, setNetMaterial] = useState({white: \" \", black: \" \"});\n    let [icons, setIcons] = useState({white: [], black: []});\n    \n    useEffect(() => {\n        let material = props.material;\n\n        let whiteTotalMaterial = material.white[\"p\"] + material.white[\"n\"]*3 + material.white[\"b\"]*3 + material.white[\"r\"]*5 + material.white[\"q\"]*9;\n        let blackTotalMaterial = material.black[\"p\"] + material.black[\"n\"]*3 + material.black[\"b\"]*3 + material.black[\"r\"]*5 + material.black[\"q\"]*9;\n\n        if(whiteTotalMaterial > blackTotalMaterial){\n            setNetMaterial({white: `+${whiteTotalMaterial - blackTotalMaterial}`, black: \" \"});\n        }\n        else if(blackTotalMaterial > whiteTotalMaterial){\n            setNetMaterial({white: \" \", black: `+${blackTotalMaterial - whiteTotalMaterial}`});\n        }\n        else {\n            setNetMaterial({white: \" \", black: \" \"});\n        }\n\n        let newIcons = {white: [], black: []};\n        for(let pieceType in material.white){\n            if(material.white[pieceType] > material.black[pieceType]){\n                for(let i = 0; i < material.white[pieceType] - material.black[pieceType]; i++){\n                    newIcons.white.push(<div className={\"icon w\" + pieceType} key={pieceType+i}></div>);\n                }\n            }\n            else if(material.black[pieceType] > material.white[pieceType]){\n                for(let i = 0; i < material.black[pieceType] - material.white[pieceType]; i++){\n                    newIcons.black.push(<div className={\"icon w\" + pieceType} key={pieceType+i}></div>);\n                }\n            }\n        }\n        setIcons(newIcons);\n    }, [props.material])\n    \n    return (\n        <div className=\"material\">\n            <div><div className=\"icon-container\">{icons.black}</div> <div className = \"material-text\">{netMaterial.black}</div></div>\n            <div><div className=\"icon-container\">{icons.white}</div> <div className = \"material-text\">{netMaterial.white}</div></div>\n        </div>\n    );\n};\n\nexport default Material;","import React from 'react';\n\nconst GamemodeSelector = (props) => {\n    \n    return (\n        <div className=\"gamemode-selector-div\">\n            <p>Set gamemode to:</p> \n            <button className=\"gamemode-selector\" onClick={()=> {\n                if(props.gamemode == \"Self Play\"){\n                    props.setGamemode(\"AI\");\n                }\n                else{\n                    props.setGamemode(\"Self Play\")\n                }\n            }}>{props.gamemode == \"Self Play\" ? \"AI\" : \"Self Play\"}</button>\n        </div>\n    );\n};\n\nexport default GamemodeSelector;","import React, {useState} from 'react';\nimport './App.css';\nimport Board from './components/Board.js';\nimport Promotion from './components/Promotion.js';\nimport MoveHistory from './components/MoveHistory.js';\nimport Material from './components/Material.js';\nimport GamemodeSelector from './components/GamemodeSelector';\n\nfunction App() {\n\n  let [promotion, setPromotion] = useState(\"disabled\");\n  let [promotionColour, setPromotionColour] = useState(\"w\");\n  let [promotionPiece, setPromotionPiece] = useState(\"\");\n\n  let [moveHistory, setMoveHistory] = useState([]);\n  let [material, setMaterial] = useState({white: {\"p\": 0, \"n\": 0, \"b\": 0, \"r\": 0, \"q\": 0}, black: {\"p\": 0, \"n\": 0, \"b\": 0, \"r\": 0, \"q\": 0}});\n\n  let [gamemode, setGamemode] = useState(\"AI\");\n\n  return (\n    <div className=\"App\">\n      <MoveHistory moveHistory={moveHistory} />\n      <Board promotion={promotion} setPromotion={setPromotion} promotionPiece = {promotionPiece} setPromotionPiece = {setPromotionPiece} promotionColour = {promotionColour} setPromotionColour = {setPromotionColour} moveHistory = {moveHistory} setMoveHistory = {setMoveHistory} material = {material} setMaterial = {setMaterial} gamemode={gamemode}/>\n      <Promotion promotion={promotion} setPromotion = {setPromotion} promotionPiece = {promotionPiece} setPromotionPiece = {setPromotionPiece} promotionColour = {promotionColour} setPromotionColour = {setPromotionColour}/>\n      <Material material = {material} />\n      <GamemodeSelector gamemode = {gamemode} setGamemode = {setGamemode}/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}